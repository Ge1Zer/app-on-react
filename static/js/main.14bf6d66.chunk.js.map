{"version":3,"sources":["api/api.js","Content/Login/LoginReducer.js","serviceWorker.js","Content/Registration/RegistrationReducer.js","reduxStore.js","Header/Logo.jsx","Header/MenuB.js","Header/MenuHeader.js","Content/ContentCont.js","utils/validator/validator.js","conponent/FormsControll/FormsControll.js","Content/Login/Login.js","hoc/step2redirectInProfiles.js","user-selector/LoginSelector.js","Content/Login/LoginCont.js","Content/Registration/Registration.js","user-selector/RegistrationSelector.js","hoc/RegistrationOnLogin.js","Content/Registration/RegistrationCont.js","App.js","index.js","hoc/withAuthRedirect.js","Content/Profile/ProfileReducer.js","Content/Messages/MessageReducer.js","Content/People/PeopleReducer.js"],"names":["instance","axios","create","withCredentials","baseURL","UserAppAPI","exit","get","then","response","data","registration","form","post","Login","login","Password","password","Nickname","name","UserLoginAPI","getUserFromServer","sendUserFormServer","value","UserProfitAPI","getProfileFromServer","profile","sendInformation","inform","UserMessageAPI","messageListFriend","messageListParty","messageListMessage","id","list","SendMessage","SendSetting","setting","UserSubAPI","getPeople","tags","nickname","subScribe","friend","loginization","status","message","String","user","Object","loading","SettingUserDispatch","type","Loading","GetUserFromServer","dispatch","a","SendUserFormForServer","formData","stopSubmit","_error","mess","Exit","LoginReducer","state","action","_id","Boolean","window","location","hostname","match","RegistrationStatus","RegistrationMessage","RegistrationReducer","reducers","combineReducers","ProfileReducer","MessageReducer","PeopleReducer","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Logo","className","connect","props","to","onClick","MenuHeader","ProfileCont","lazy","MessageCont","PeopleCont","withAuthRedirect","fallback","path","render","required","maxLengthCreator","maxLength","length","undefined","minLengthCreator","minLength","userEntry","zzzz","test","Input","input","meta","error","touched","minLength6","ReduxLoginForm","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","redirectInProfiles","Component","ComponentRedirect","History","localStorage","this","Profile","Dialog","React","userStatus","getLoginUser","getUserEntry","getLoading","useEffect","Cookies","set","maxLength16","ReduxRegistrationForm","RegistrationCont","EntryForm","console","log","RegistrationThunk","PureComponent","FormRegistration","App","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","unregister","StateTo","RediComp","profileState","EditInform","GetProfileFromServer","profileNickname","profilePhoto","Photo","origin","default","profilePhotoMin","PhotoMin","profileStatus","Status","profileLocation","Location","profileAge","Age","profileSkills","Skills","profileTags","Tags","profileGender","Gender","photo","age","skills","gender","Message","ListMessage","AvaParty","NameParty","Friend","Party","SetMessage","pushMessage","deleteParty","deleted","GetListMessages","GetListFriend","GetListParty","text","img","date","i","r","findIndex","splice","people","SetPeople","SetCurrent","current","GetUser","page","FollowPeople","follow","f","filter","friendStatus"],"mappings":"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","file":"static/js/main.14bf6d66.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://express-kuku.herokuapp.com/',\r\n    // headers:{'KEY FOR CONNECTED WITH SERVER':\"12312-12312-SDF-34SDF2\"}\r\n});\r\n//_____________________________________________________________________________________\r\nexport const UserAppAPI = {\r\n\r\n    exit() {\r\n        return instance.get('exit').then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    registration(form) {\r\n        return instance.post('registration', {\r\n            Login: form.login,\r\n            Password: form.password,\r\n            Nickname: form.name\r\n        }).then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n};\r\n//__________________________________________________________________________________\r\nexport const UserLoginAPI = {\r\n    getUserFromServer() {\r\n        debugger\r\n        return instance.get('login').then(response => {\r\n            debugger\r\n            return response.data\r\n        })\r\n    },\r\n    sendUserFormServer(value) {\r\n        debugger\r\n        return instance.post('login', {Login:value.login, Password:value.password}).then(response => {\r\n            debugger\r\n            return response.data\r\n        })\r\n    }\r\n};\r\n//___________________________________________________________________________________\r\nexport const UserProfitAPI = {\r\n\r\n    getProfileFromServer(profile) {\r\n        return instance.get(`profile/${profile}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    sendInformation(inform){\r\n        return instance.post(`update/info`, {inform})\r\n    }\r\n\r\n};\r\n//_____________________________________________________________________________________\r\nexport const UserMessageAPI = {\r\n    messageListFriend() {\r\n        return instance.get(`message/friend`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    messageListParty() {\r\n        return instance.get(`message/party`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    messageListMessage({id,list}) {\r\n        debugger\r\n        return instance.post(`message/list`,{id,list}).then(response => {\r\n            debugger\r\n            return response.data\r\n        })\r\n    },\r\n    SendMessage(profile) {\r\n        return instance.post(`message/send`, {profile}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    SendSetting(setting) {\r\n        debugger\r\n        return instance.post(`message/setting`, {setting}).then(response => {\r\n            debugger\r\n            return response.data\r\n        })\r\n    }\r\n};\r\n//_____________________________________________________________________________________\r\nexport const UserSubAPI = {\r\n    getPeople({tags,nickname,list}) {\r\n        return instance.post('people',{tags,nickname,list}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    subScribe(friend) {\r\n        return instance.post('subscribe', {id: friend}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n};\r\n//_____________________________________________________________________________________\r\n\r\n","import {UserAppAPI, UserLoginAPI} from \"../../api/api\";\r\nimport {stopSubmit} from 'redux-form'\r\n\r\nlet loginization = {\r\n    status: false\r\n    , message: String\r\n    , user: Object\r\n\r\n    , loading: false\r\n};\r\n//#####################################################################\r\nconst LoginReducer = (state = loginization, action) => {\r\n    switch (action.type) {\r\n//##############################################\r\n        case 'SET-LOGIN':\r\n            return {\r\n                ...state\r\n                , status: action.user.status\r\n                , message: action.user.message\r\n                , user: action.user._id\r\n            };\r\n        case 'DEL-USER':\r\n            return {\r\n                ...state\r\n                , status: false\r\n                , message: String\r\n                , user: Object\r\n            };\r\n//#################################################\r\n        case 'LOADING'      :\r\n            return {\r\n                ...state\r\n                , loading: action.loading\r\n            };\r\n//#################################################\r\n        default             :\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n};\r\n//#####################################################################\r\nexport let SettingUserDispatch = (user) => ({type: 'SET-LOGIN', user});\r\nexport let DeletedUserDispatch = () => ({type: 'DEL-USER'});\r\n\r\nexport let Loading = (loading) => ({type: 'LOADING', loading});\r\n//############################################################################\r\nexport const GetUserFromServer = () =>\r\n    async (dispatch) => {\r\n        let data = await UserLoginAPI.getUserFromServer();\r\n    data ? dispatch(SettingUserDispatch(data))\r\n         : dispatch(DeletedUserDispatch());\r\n};//получить пользователя из куков\r\nexport const SendUserFormForServer = (formData) => async (dispatch) => {\r\n    let data = await UserLoginAPI.sendUserFormServer(formData);\r\n    data ? dispatch(SettingUserDispatch(data))\r\n         : dispatch(stopSubmit('login', {_error: data.mess}))\r\n};//войти с помощью пароля и логин\r\nexport const Exit = () => (dispatch) => {\r\n    UserAppAPI.exit().then(data => {\r\n        data && dispatch(DeletedUserDispatch());\r\n    })\r\n};//очистить стейт и удалить куки о пользователе\r\n//####################################################################################################\r\nexport default LoginReducer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {UserAppAPI} from \"../../api/api\";\r\n\r\nlet status = {\r\n    RegistrationStatus: false\r\n    , RegistrationMessage: ''\r\n}\r\n//#####################################################################\r\n// eslint-disable-next-line no-unused-vars\r\nconst RegistrationReducer = (state = status, action) => {\r\n    if (action.type === 'REGISTRATION-STATUS') {\r\n        return {\r\n            ...state\r\n            , RegistrationStatus: action.registration.status\r\n            , RegistrationMessage: action.registration.mess\r\n        }\r\n    } else {\r\n        return {\r\n            ...state\r\n        }\r\n    }\r\n};\r\n//#####################################################################\r\n//Action for ComponentDid Mount or ComponentDidUpdate\r\nexport let RegistrationDispatch = (registration) => ({type: 'REGISTRATION-STATUS', registration});\r\n//############################################################################\r\n//Thunk for send on Server\r\nexport const RegistrationThunk = (FormRegistration) => (dispatch) =>{\r\n        UserAppAPI.registration(FormRegistration).then(data => {\r\n            data.status && dispatch(RegistrationDispatch(data))\r\n        })\r\n};\r\n//####################################################################################################\r\nexport default RegistrationReducer;\r\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nimport LoginReducer from \"./Content/Login/LoginReducer\";\r\nimport RegistrationReducer from \"./Content/Registration/RegistrationReducer\";\r\nimport ProfileReducer from \"./Content/Profile/ProfileReducer\";\r\nimport MessageReducer from \"./Content/Messages/MessageReducer\";\r\nimport PeopleReducer from \"./Content/People/PeopleReducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    LoginReducer: LoginReducer,\r\n    RegistrationReducer: RegistrationReducer,\r\n\r\n    ProfileReducer: ProfileReducer,\r\n    MessageReducer: MessageReducer,\r\n    PeopleReducer: PeopleReducer,\r\n\r\n    form: formReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\r\nimport '../style/App.css';\r\n\r\nfunction Logo() {\r\n    return  <div className={'Logo'}>\r\n\r\n            </div>\r\n\r\n}\r\n\r\nexport default Logo","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {Exit} from \"../Content/Login/LoginReducer\";\r\n\r\nlet Menu = (props) => {\r\n    function exit() {\r\n        props.Exit()\r\n    }\r\n\r\n    return (\r\n        <div className=\"Menu\">\r\n\r\n            <div><NavLink to='/profile' className=\"Button_item\">Моя Страница </NavLink></div>\r\n            <div><NavLink to=\"/message\" className=\"Button_item\">Сообщения </NavLink></div>\r\n            <div><NavLink to='/people' className=\"Button_item\">Пользователи </NavLink></div>\r\n            <div>\r\n                <button onClick={exit}>Exit</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nconst mapStateTo = (state) => ({state: state.LoginReducer,});\r\nexport default compose(\r\n    connect(mapStateTo, {Exit}\r\n    )\r\n)(Menu)","import Logo from \"./Logo\";\r\nimport Menu from \"./MenuB\";\r\nimport React from \"react\";\r\n\r\nlet MenuHeader = () => {\r\n    return <div className={'Header'}>\r\n                <Logo/>\r\n                <Menu/>\r\n           </div>\r\n\r\n}\r\nexport default MenuHeader","import React, {Suspense, lazy} from 'react'\r\nimport {Route} from \"react-router\";\r\nimport MenuHeader from \"../Header/MenuHeader\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\n\r\nconst ProfileCont = lazy(() => import ('./Profile/ProfileCont'));\r\nconst MessageCont = lazy(() => import(\"./Messages/MessageCont\"));\r\nconst PeopleCont = lazy(() => import(\"./People/PeopleCont\"));\r\n\r\nlet ContentCont = () => {\r\n    return <Suspense fallback={'.... чу херня происходит, давай подождем'}>\r\n            <div className={'Content-Item'}>\r\n                <Route path='/profile/:profile?' render={() =>\r\n                    <div>\r\n                           <MenuHeader/>\r\n                           <ProfileCont/>\r\n                    </div>\r\n                }/>\r\n                <Route path='/message/:profile?' render={() =>\r\n                    <div>\r\n                            <MenuHeader/>\r\n                            <MessageCont/>\r\n                    </div>\r\n                }/>\r\n                <Route path='/people' render={() =>\r\n                    <div>\r\n                            <MenuHeader/>\r\n                            <PeopleCont/>\r\n                    </div>\r\n                }/>\r\n            </div>\r\n    </Suspense>\r\n};\r\nexport default withAuthRedirect(ContentCont);\r\n","//Это проверка, совпадает ли введеное пользователлем с требованиям к \"логину и паролю\"\r\n\r\n//проверка---это поле является обязательны после\r\n// клика он запоминает, при уходе он проверит заполнили ли вы его\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const required = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n};\r\n\r\n//Это устанавливает проверку на максимальную длину записанного\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    return (\r\n        value && value.length > maxLength\r\n            ? `Max length is ${maxLength} symbols`\r\n            : undefined\r\n    )\r\n};\r\n\r\n//Это устанавливает проверку на минимальную длину записанного\r\nexport const minLengthCreator = (minLength) => (value) => {\r\n    return (\r\n        value && value.length < minLength ? `Min length is ${minLength} symbols` : undefined\r\n    )\r\n};\r\n\r\n// //Провека. Число ли это?\r\n// const number = (value) =>\r\n//     value && isNaN(Number(value)) ? 'Must be a number' : undefined\r\n//\r\n//\r\n// // меньше ли чем минимальное значение\r\n// const minValue = min => value =>\r\n//     value && value < min ? `Must be at least ${min}` : undefined\r\n// const minValue13 = minValue(13)\r\n//\r\n// //проверка на правильность заполнения МЫЛА\r\nexport const email = (zzzz) => (value) => {\r\n    debugger\r\n    return (\r\n        value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n            ? 'Invalid email address'\r\n            : !zzzz.status ? <span>Пароль или логин не правильный</span> : undefined\r\n    )\r\n\r\n};\r\n//\r\n// // меньше чем допустимый вызраст\r\n// const tooYoung = value =>\r\n//     value && value < 13\r\n//         ? 'You do not meet the minimum age requirement!'\r\n//         : undefined\r\n//\r\n// // меньше чем допустимый вызраст\r\n// const aol = value =>\r\n//     value && /.+@aol\\.com/.test(value)\r\n//         ? 'Really? You still use AOL for your email?'\r\n//         : undefined\r\n//\r\n//\r\n// // Только арифметические знаки\r\n// const alphaNumeric = value =>\r\n//     value && /[^a-zA-Z0-9 ]/i.test(value)\r\n//         ? 'Only alphanumeric characters'\r\n//         : undefined\r\n//\r\n// // номер телефона 10 символов\r\n// export const phoneNumber = value =>\r\n//     value && !/^(0|[1-9][0-9]{9})$/i.test(value)\r\n//         ? 'Invalid phone number, must be 10 digits'\r\n//         : undefined\r\n//\r\n// let r = {number, minValue13, email, tooYoung, aol, alphaNumeric, phoneNumber}\r\n\r\n\r\nconst mapStateTo = (state) => ({\r\n    userEntry: state.LoginReducer.userEntry\r\n});\r\nexport default compose(connect(mapStateTo, null))(email)\r\n","import React from 'react'\r\nimport \"./style.css\"\r\n\r\nexport const Input = ({input, meta, value, ...props}) => {\r\n    const error = meta.touched && meta.error;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input {...input} {...props} className={error && \"formControl\"}/>\r\n            </div>\r\n            {error && <span className={'formSpan'}>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    const errore = meta.touched && meta.error;\r\n    return (\r\n        <div>\r\n            <div className={errore && \"formControl\"}>\r\n                <textarea {...input} {...props} wrap=\"soft\" rows={'1'}/>\r\n            </div>\r\n            {errore && <span>{errore}</span>}\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../utils/validator/validator\";\r\nimport {Input} from \"../../conponent/FormsControll/FormsControll\";\r\nimport \"./../../conponent/FormsControll/style.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst maxLength15 = maxLengthCreator(15);\r\nconst minLength6 = minLengthCreator(6);\r\n\r\nlet Login = (props) => {\r\n    return <div>\r\n        <div>LOGIN</div>\r\n        <div>Entry Your Login & Password, please</div>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field required\r\n                        name={'login'}\r\n                        component={Input}\r\n                        placeholder={'Login'}\r\n                        validate={[required, minLength6]}/>\r\n            </div>\r\n            <div><Field required\r\n                        placeholder={'Password'}\r\n                        component={Input}\r\n                        name={'password'}\r\n                        validate={[required, minLength6]}/>\r\n            </div>\r\n            <div><Field component={'input'}\r\n                        type={'checkbox'}\r\n                        name={'rememberMe'}\r\n                        validate={[]}/>Remember me\r\n            </div>\r\n            {props.error && <div className={'errorEmaOrPass'}>{props.error} Это хуйня, давай заново </div>}\r\n            <div>\r\n                <button value=\"Enter\">Enter</button>\r\n                <button><NavLink to='/registration' className=\"Button_item\">Регистрация </NavLink></button>\r\n            </div>\r\n\r\n        </form>\r\n    </div>\r\n}\r\nconst ReduxLoginForm = reduxForm({form: 'login'})(Login);\r\n\r\nexport default ReduxLoginForm;","import React from 'react'\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst redirectInProfiles = (Component) => {\r\n\r\n    let state = (state) => ({state: state.LoginReducer, userStatus: state.ProfileReducer.status});\r\n\r\n    class ComponentRedirect extends React.Component {\r\n        state={\r\n        History :  localStorage.History\r\n    };\r\n        render() {\r\n            if (this.props.state.status) {\r\n                switch (History) {\r\n                    case 'profile' :\r\n                        return <Redirect to={`/profile/${this.state.Profile}`}/>;\r\n                    case 'message' :\r\n                        return <Redirect to={`/message/${this.state.Dialog}`}/>;\r\n                    case 'people' :\r\n                        return <Redirect to={`/people`}/>;\r\n                    default  :\r\n                        return <Redirect to={`/profile`}/>;\r\n                }\r\n            } else {\r\n                return <Component {...this.props} />\r\n            }\r\n        }\r\n    }\r\n    return connect(state)(ComponentRedirect)\r\n};\r\nexport default redirectInProfiles","export const getLoginUser = (state) => {\r\n    return state.LoginReducer.user\r\n};\r\nexport const getUserEntry = (state) => {\r\n    return state.LoginReducer.userEntry\r\n};\r\nexport const getLoading = (state) => {\r\n    return state.LoginReducer.loading\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\n\r\nimport ReduxLoginForm from \"./Login\";\r\n\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport redirectInProfiles from \"../../hoc/step2redirectInProfiles\";\r\nimport {Exit, GetUserFromServer, SendUserFormForServer} from \"./LoginReducer\";\r\nimport {getLoading, getLoginUser, getUserEntry} from \"../../user-selector/LoginSelector\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nlet  LoginCont=(props)=>{\r\n\r\n    useEffect(()=> {\r\n        props.GetUserFromServer()\r\n    },[]);\r\n\r\n    let EntryForm = (formData) => {\r\n        props.SendUserFormForServer(formData)\r\n        Cookies.set('History', 'profile')\r\n    };\r\n\r\n    return (\r\n            <div className={'Page-Login'}>\r\n                  <ReduxLoginForm onSubmit={EntryForm}  />\r\n            </div>\r\n    )\r\n};\r\nconst mapStateTo = (state) => ({\r\n    user: getLoginUser(state)\r\n    , userEntry: getUserEntry(state)\r\n    , loading: getLoading(state)\r\n});\r\nexport default compose(connect(mapStateTo, {\r\n    Exit,\r\n    GetUserFromServer,\r\n    SendUserFormForServer\r\n}), redirectInProfiles)(LoginCont)\r\n\r\n\r\n","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../utils/validator/validator\";\r\nimport {Input} from \"../../conponent/FormsControll/FormsControll\";\r\nimport \"./../../conponent/FormsControll/style.css\"\r\n\r\nconst maxLength16 = maxLengthCreator(16)\r\nconst minLength6 = minLengthCreator(6)\r\n\r\nlet Registration = (props) => {\r\n    const {handleSubmit} = props\r\n    return <div>\r\n        <h1>REGISTRATION</h1>\r\n        <div></div>\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <div>Nickname</div>\r\n                <Field component={Input}\r\n                       placeholder={'You`r Name'}\r\n                       name={'name'}\r\n                       validate={[required, minLength6, maxLength16]}/>\r\n            </div>\r\n\r\n            <div>\r\n                <div>Login</div>\r\n                <Field required\r\n                       name={'login'}\r\n                       component={Input}\r\n                       placeholder={'Login'}\r\n                       validate={[required, minLength6]}/>\r\n            </div>\r\n            <div>\r\n                <div>Password</div>\r\n                <Field required\r\n                       placeholder={'Password'}\r\n                       component={Input}\r\n                       name={'password'}\r\n                       validate={[required, minLength6, maxLength16]}/>\r\n            </div>\r\n\r\n            {props.error && <div className={'errorEmaOrPass'}>{props.error} Это хуйня, давай заново </div>}\r\n            <div>\r\n                <button value=\"Enter\">Enter</button>\r\n            </div>\r\n\r\n        </form>\r\n    </div>\r\n};\r\nconst ReduxRegistrationForm = reduxForm({form: 'registration'})(Registration);\r\n\r\nexport default ReduxRegistrationForm;","export const RegistrationMessage = (state) => {\r\n    return state.RegistrationReducer.RegistrationMessage\r\n};\r\n\r\nexport const RegistrationStatus = (state) => {\r\n    return state.RegistrationReducer.RegistrationStatus\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet state = (state) => ({status: state.RegistrationReducer.RegistrationStatus});\r\n\r\n\r\nexport const redirectInLogin = (Component) => {\r\n\r\n\r\n    class ComponentRedirect extends React.Component {\r\n        render() {\r\n            if (this.props.status) {\r\n                return <Redirect to={`/login`}/>;\r\n            } else {\r\n                return <Component {...this.props} />\r\n            }\r\n        }\r\n    }\r\n\r\n    let ComponentTo = connect(state)(ComponentRedirect);\r\n\r\n\r\n    return ComponentTo\r\n};\r\n","import React, {PureComponent} from 'react';\r\n\r\nimport ReduxRegistrationForm from \"./Registration\";\r\n\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {RegistrationThunk} from \"./RegistrationReducer\";\r\nimport {RegistrationMessage, RegistrationStatus} from \"../../user-selector/RegistrationSelector\";\r\nimport {redirectInLogin} from \"../../hoc/RegistrationOnLogin\";\r\n\r\n\r\nclass RegistrationCont extends PureComponent {\r\n\r\n    EntryForm = (formData) => {\r\n        formData.name=formData.name.match(/(\\w+)/gim);\r\n        console.log(formData);\r\n        this.props.RegistrationThunk(formData)\r\n    };\r\n    render() {\r\n        return <div className={'Form-Registration'}>\r\n            <ReduxRegistrationForm onSubmit={this.EntryForm}\r\n                                   userEntry={this.props.userEntry}\r\n            />\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateTo = (state) => ({\r\n    message: RegistrationMessage(state)\r\n    , status: RegistrationStatus(state)\r\n});\r\nexport default compose(redirectInLogin, connect(mapStateTo, {RegistrationThunk}))(RegistrationCont)\r\n\r\n\r\n","import React from 'react';\nimport ContentCont from \"./Content/ContentCont\";\nimport {Route} from \"react-router\";\nimport LoginCont from \"./Content/Login/LoginCont\";\nimport RegistrationCont from \"./Content/Registration/RegistrationCont\";\n\nlet App=()=> {\n    return <div className={'Page-All'}>\n                <div>\n                    <Route path='/login' render={() => <LoginCont/>}/>\n                    <Route path='/registration' render={() => <RegistrationCont/>}/>\n                </div>\n                <div className={'Page-Content'}>\n                    <ContentCont/>\n                </div>\n    </div>\n};\nexport default App","import  * as serviceWorker from './serviceWorker'\n\nimport store from './reduxStore.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from \"react-router-dom\";\nimport App from './App';\n\nReactDOM.render(\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>, document.getElementById('root')\n);\nserviceWorker.unregister();\n\n\n\n\n\n\n\n\n\n\n","import React from 'react'\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet StateTo = (state) => ({state: state.LoginReducer});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RediComp extends React.Component {\r\n\r\n        render() {\r\n            return (\r\n                this.props.state.status\r\n                    ? <Component {...this.props} />\r\n                    : <Redirect to={`/login`}/>\r\n            )\r\n        }\r\n    }\r\n\r\n    let ConnectedAuth = connect(StateTo)(RediComp);\r\n\r\n    return ConnectedAuth\r\n};\r\n\r\n","import {UserProfitAPI} from \"../../api/api\";\r\n\r\nlet profileState = {\r\n    status: false\r\n    , message: 'Profile not entry'\r\n    , loading: false\r\n\r\n\r\n};\r\n//#####################################################################\r\nconst ProfileReducer = (state = profileState, action) => {\r\n    switch (action.type) {\r\n//##############################################\r\n        case \"SET-PROFILE\"  :\r\n            return {\r\n                ...state\r\n                , status: action.profile.status\r\n                , message: action.profile.mess\r\n\r\n                , profileNickname: action.profile.Profile.Nickname\r\n                , profilePhoto: action.profile.Profile.Photo.origin!==''\r\n                                                        ?action.profile.Profile.Photo.origin\r\n                                                        :action.profile.Profile.Photo.default\r\n                , profilePhotoMin: action.profile.Profile.PhotoMin.origin!==''\r\n                    ?action.profile.Profile.PhotoMin.origin\r\n                    :action.profile.Profile.PhotoMin.default\r\n\r\n                , profileStatus: action.profile.Profile.Status\r\n                , profileLocation: action.profile.Profile.Location\r\n                , profileAge: action.profile.Profile.Age\r\n                , profileSkills: action.profile.Profile.Skills\r\n                , profileTags: action.profile.Profile.Tags\r\n                , profileGender: action.profile.Profile.Gender\r\n            };\r\n        case 'LOADING'      :\r\n            return {\r\n                ...state\r\n                , loading: action.loading\r\n            };\r\n//#################################################\r\n            case \"EDIT-INFO\"  :\r\n            return {\r\n                ...state\r\n                , profileNickname: action.inform.nickname\r\n                , profilePhoto: action.inform.photo\r\n                , profileStatus: action.inform.status\r\n                , profileLocation: action.inform.location\r\n                , profileAge: action.inform.age\r\n                , profileSkills: action.inform.skills\r\n                , profileTags: action.inform.tags\r\n                , profileGender: action.inform.gender\r\n            };\r\n//#################################################\r\n        default             :\r\n            return state\r\n    }\r\n};\r\n\r\n//$$$$$$___Action for ComponentDid Mount or ComponentDidUpdate____$$$$$\r\nexport let SettingProfile = (profile) => ({type: \"SET-PROFILE\", profile});\r\nexport let Loading = (loading) => ({type: 'LOADING', loading});\r\n//$$$$$$___Action for changing state____$$$$$\r\nexport const EditInform = (inform) => ({type: \"EDIT-INFO\", inform});\r\n//####################################################################################################\r\n\r\n//$$$$$$___Thunk for send on Server____$$$$$\r\nexport const GetProfileFromServer = (id) => async (dispatch) => {\r\n        let data = await UserProfitAPI.getProfileFromServer(id);\r\n    if (data) {\r\n        dispatch(SettingProfile(data));\r\n    }\r\n    return true\r\n    };//поолучить пользователя\r\n\r\nexport const sendInformation = (inform) => async (dispatch) => {\r\n    debugger\r\n        let data=await UserProfitAPI.sendInformation(inform);\r\n    if(data){\r\n        debugger\r\n        dispatch(EditInform(inform));\r\n    }\r\n\r\n\r\n    };//изменить статус\r\n\r\n//####################################################################################################\r\nexport default ProfileReducer;\r\n","import {UserMessageAPI} from \"../../api/api\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nlet message = {\r\n    Message:{ListMessage:[],AvaParty:'',NameParty:[]}\r\n    ,Friend:[]\r\n    ,Party:[]\r\n    ,loading: false\r\n};\r\n//#####################################################################\r\nconst MessageReducer = (state = message, action) => {\r\n    switch (action.type) {\r\n//##############################################\r\n        case \"SET-FRIEND\"  : debugger\r\n            return {\r\n                ...state\r\n                , Friend: action.friend.Friend\r\n            };\r\n        case \"SET-PARTY\"  : debugger\r\n            return {\r\n                ...state\r\n                , Party: action.friend.Party\r\n            };\r\n        case \"SET-MESSAGE\"  : debugger\r\n            return {\r\n                ...state\r\n                , Message: action.message\r\n            };\r\n\r\n        case 'LOADING'      :\r\n            return {\r\n                ...state\r\n                , loading: action.loading\r\n            };\r\n//#################################################\r\n        case \"PUSH-MESSAGE\" : debugger\r\n\r\n            return {\r\n                ...state\r\n                ,Message: {... state.Message, ListMessage:[...state.Message.ListMessage,{\r\n                        user: action.message.user\r\n                        , text: action.message.text\r\n                        , img:action.message.img\r\n                        ,date:action.message.date}\r\n                        ]\r\n                }\r\n            };\r\n        case \"DELETED-MESSAGE\" : debugger\r\n            for(let i=0;i<action.deleted.list.length;i++){\r\n                let r=state.Party.findIndex(r=>r._id===action.deleted.list[i]);\r\n                state.Party.splice(r,r+1)\r\n            }\r\n            return {\r\n                ...state\r\n            };\r\n//#################################################\r\n        default             :\r\n            return state\r\n    }\r\n};\r\n//#####################################################################\r\n//Action for ComponentDid Mount or ComponentDidUpdate\r\nexport let SetMessage = (message) => ({type: \"SET-MESSAGE\", message});\r\nexport let SetFriend = (friend) => ({type: \"SET-FRIEND\", friend});\r\nexport let SetParty = (friend) => ({type: \"SET-PARTY\", friend});\r\nexport let Loading = (loading) => ({type: 'LOADING', loading});\r\n//############################################################################\r\n//Action for changing state\r\nexport const pushMessage = (message) => ({type: \"PUSH-MESSAGE\", message});\r\nexport const deleteParty = (deleted) => ({type: \"DELETED-MESSAGE\", deleted});\r\n//############################################################################\r\nexport const GetListMessages = (profile) => async (dispatch) => {\r\n    debugger\r\n    if(profile.id) {\r\n        dispatch(Loading(true));\r\n        let data = await UserMessageAPI.messageListMessage(profile);\r\n        if (data) {\r\n            debugger\r\n            Cookies.set('message', profile);\r\n            dispatch(SetMessage(data));\r\n            dispatch(Loading(false));\r\n        }\r\n    }\r\n};//получить список сообщений\r\nexport const GetListFriend = () => async (dispatch) => {\r\n    dispatch(Loading(true));\r\n    let data = await UserMessageAPI.messageListFriend();\r\n    if (data) {\r\n        dispatch(SetFriend(data));\r\n        dispatch(Loading(false));\r\n    }\r\n};//получить список друзей\r\nexport const GetListParty = () => async (dispatch) => {\r\n    dispatch(Loading(true));\r\n    let data = await UserMessageAPI.messageListParty();\r\n    if (data) {\r\n        dispatch(SetParty(data));\r\n        dispatch(Loading(false));\r\n    }\r\n};//получить список друзей\r\n\r\nexport const SendMessage = (profile) => async (dispatch) => {\r\n    dispatch(Loading(true));\r\n    let data = await UserMessageAPI.SendMessage(profile);\r\n    if (data) {\r\n        dispatch(pushMessage(profile));\r\n        dispatch(Loading(false));\r\n    }\r\n};//отправить сообщение\r\nexport const SendSetting = (setting) => async (dispatch) => {\r\n    let data=await UserMessageAPI.SendSetting(setting);\r\n    data && dispatch(deleteParty(setting))\r\n\r\n};//отправить сообщение\r\n//####################################################################################################\r\nexport default MessageReducer;\r\n","import {UserSubAPI} from \"../../api/api\";\r\n\r\nlet people = {\r\n    loading: false\r\n    ,people:[]\r\n\r\n}\r\n//#####################################################################\r\nconst PeopleReducer = (state = people, action) => {\r\n    switch (action.type) {\r\n//##############################################\r\n        case \"GET-USERS\"    :\r\n            return {\r\n                ...state\r\n                , people: action.people.people\r\n            };\r\n        case \"FOLLOW-PEOPLE\"    :\r\n            let f=state.people.filter(r=>r._id===action.follow);\r\n                f[0].friendStatus? f[0].friendStatus=false:f[0].friendStatus=true;\r\n            return {\r\n                ...state\r\n            };\r\n        case 'LOADING'      :\r\n            return {\r\n                ...state\r\n                , loading: action.loading\r\n            };\r\n        case 'CURRENT'      : debugger\r\n            return {\r\n                ...state\r\n                , current: action.current\r\n            };\r\n//#################################################\r\n        default             :\r\n            return state\r\n    }\r\n};\r\n//#####################################################################\r\n//Action for ComponentDid Mount or ComponentDidUpdate\r\nexport let SetPeople = (people) => ({type: \"GET-USERS\", people});\r\nexport let Loading = (loading) => ({type: 'LOADING', loading});\r\nexport let SetCurrent = (current) => ({type: 'CURRENT', current});\r\n//############################################################################\r\n//Action for changing state\r\nexport const followPeople = (follow) => ({type: \"FOLLOW-PEOPLE\", follow});\r\n//####################################################################################################\r\nexport const GetUser = (page) => async (dispatch) => {\r\n    dispatch(Loading(true));\r\n    let data = await UserSubAPI.getPeople(page);\r\n    if (data) {\r\n        dispatch(SetPeople(data));\r\n        dispatch(Loading(false));\r\n    }\r\n};\r\nexport const FollowPeople = (friend) => async (dispatch) => {\r\n    dispatch(Loading(true));\r\n    let data = await UserSubAPI.subScribe(friend);\r\n    if (data) {\r\n        dispatch(followPeople(friend));\r\n        dispatch(Loading(false));\r\n    }\r\n};\r\n//####################################################################################################\r\n\r\n\r\nexport default PeopleReducer;\r\n"],"sourceRoot":""}