{"version":3,"sources":["serviceWorker.js","reduxStore.js","Content/ContentCont.js","App.js","index.js","Content/Login/LoginReducer.js","api/api.js","Content/Profile/ProfileReducer.js","Content/Messages/MessageReducer.js","Content/Subscriber/SubscriberReducer.js"],"names":["Boolean","window","location","hostname","match","reducers","combineReducers","LoginReducer","ProfileReducer","MessageReducer","PeopleReducer","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ProfileCont","lazy","MessageCont","SubscribersCont","LoginCont","ContentCont","fallback","className","path","render","App","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","users","userEntry","user","loading","SetUser","type","Loading","LoginGetUser","dispatch","a","UserLoginAPI","getLoginUser","data","LoginSetUser","formData","enterLoginUser","login","password","rememberMe","status","action","stopSubmit","_error","text","Exit","UserAppAPI","exit","state","id","NaN","instance","axios","create","withCredentials","baseURL","get","response","remember","post","UserPostAPI","getProfile","profile","getPost","changeStatus","sendPost","UserMessageAPI","messageListFriend","messageListMessage","SendMessage","messageText","UserSubAPI","clic","page","currentPage","subScribe","friend","IdFriend","IsProfile","SetProfile","editStatus","pushPost","GetProfile","userID","Cookies","set","GetPost","SendStatus","SendPost","fullName","name","lastName","picture","push","message","SetMessage","pushMessage","GetListMessages","GetListFriend","people","allPeople","SetPeople","GetUser","FollowPeople","follow","filter","x"],"mappings":"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","file":"static/js/main.d7fd1ac7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nimport LoginReducer from \"./Content/Login/LoginReducer\";\r\nimport ProfileReducer from \"./Content/Profile/ProfileReducer\";\r\nimport MessageReducer from \"./Content/Messages/MessageReducer\";\r\nimport PeopleReducer from \"./Content/Subscriber/SubscriberReducer\";\r\n\r\n\r\nlet reducers= combineReducers({\r\n    LoginReducer: LoginReducer,\r\n\r\n    ProfileReducer:ProfileReducer,\r\n    MessageReducer:MessageReducer,\r\n    PeopleReducer:PeopleReducer,\r\n\r\n    form: formReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nwindow.store=store;\r\n\r\nexport default store;\r\n\r\n\r\n","import React, {Suspense,lazy} from 'react'\r\nimport {Route} from \"react-router\";\r\n\r\nconst ProfileCont = lazy(() => import ('./Profile/ProfileCont'));\r\nconst MessageCont = lazy(() => import(\"./Messages/MessageCont\"));\r\nconst SubscribersCont = lazy(() => import(\"./Subscriber/SubscriberCont\"));\r\nconst LoginCont = lazy(() => import(\"./Login/LoginCont\"));\r\n\r\n\r\n\r\n\r\n\r\nlet ContentCont=()=>{\r\n  return (\r\n      <Suspense fallback={'.... чу херня происходит, давай подождем'}>\r\n          <div>\r\n               <div className={'CONTENT_AN_PAGE'}>\r\n\r\n                 <Route path='/profile/:userID?' render={() => <ProfileCont/>}/>\r\n                 <Route path='/message/:profileID?' render={() => <MessageCont/>}/>\r\n                 <Route path='/subscribers' render={() => <SubscribersCont/>}/>\r\n\r\n               </div>\r\n\r\n\r\n               <div className={'LOGIN'}>\r\n\r\n                 <Route path='/' render={ ()=> <LoginCont /> }/>\r\n\r\n               </div>\r\n          </div>\r\n      </Suspense>\r\n  )\r\n};\r\nexport default ContentCont;\r\n","import React from 'react';\nimport ContentCont from \"./Content/ContentCont\";\n\nlet App=()=> {\n        return (\n                <div>\n                     <ContentCont />\n                </div>\n\n        )\n};\nexport default App","import  * as serviceWorker from './serviceWorker'\n\nimport store from './reduxStore.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from \"react-router-dom\";\nimport App from './App';\n\n\n\n\tReactDOM.render(\n\t<BrowserRouter basename={process.env.PUBLIC_URL}>\n\t\t<Provider store={store}>\n\t\t\t\t\t\t\t<App/>\n\t\t</Provider>\n\t</BrowserRouter>, document.getElementById('root')\n\t\t\t    );\nserviceWorker.unregister();\n\n\n\n\n\n\n\n\n\n\n","import {UserAppAPI, UserLoginAPI} from \"../../api/api\";\r\nimport {stopSubmit} from 'redux-form'\r\n\r\nlet users={\r\n     userEntry:{}\r\n    ,user:[]\r\n\r\n    ,loading: false\r\n}\r\n//#####################################################################\r\nconst LoginReducer=(state=users, action)=> {\r\n    switch (action.type) {\r\n//##############################################\r\n        case 'SET-LOGIN'    :return {\r\n             ...state\r\n            ,userEntry:action.user[0]\r\n            ,user:action.user[1]\r\n        };\r\n        case 'DEL-USER'     :return {\r\n            userEntry:{status:false}\r\n            ,user:{id:NaN,user:NaN}\r\n\r\n            ,loading: false\r\n        };\r\n//#################################################\r\n        case 'LOADING'      :return {\r\n            ...state\r\n            ,loading: action.loading\r\n        };\r\n//#################################################\r\n        default             :return state\r\n    }};\r\n//#####################################################################\r\n//Action for ComponentDid Mount or ComponentDidUpdate\r\nexport\tlet SetUser=(user)=>({type: 'SET-LOGIN',user});\r\nexport\tlet DelUser=()=>({type:'DEL-USER'});\r\n\r\nexport\tlet Loading=(loading)=>({type:'LOADING', loading});\r\n//############################################################################\r\n//Thunk for send on Server\r\n//ВСЯ ИНФОРМАЦИЯ О ПОЛЬЗОВАТЕЛЕ\r\nexport const LoginGetUser=()=>async (dispatch)=>{\r\n        dispatch(Loading(true));\r\n        let data=await UserLoginAPI.getLoginUser();\r\n            if(data){\r\n            dispatch(SetUser(data))\r\n            }else{\r\n                dispatch(DelUser());\r\n            }\r\n        dispatch(Loading(false));\r\n\r\n};//получить пользователя из куков\r\nexport const LoginSetUser=(formData)=>async (dispatch)=>{\r\n    dispatch(Loading(true));\r\n    let data=await UserLoginAPI.enterLoginUser(formData.login,formData.password,formData.rememberMe);\r\n        if(data[0].status) {\r\n           dispatch(SetUser(data));\r\n           dispatch(Loading(false))\r\n        }else{\r\n           let action=stopSubmit('login',{_error:data[0].text});\r\n            dispatch(action);\r\n        }\r\n};//войти с помощью пароля и логин\r\nexport const Exit=()=>{\r\n    debugger\r\n    return (dispatch)=>{\r\n        dispatch(Loading(true));\r\n        UserAppAPI.exit().then(data=>{\r\n            debugger\r\n            if(data) {\r\n                dispatch(DelUser());\r\n            }\r\n        })\r\n    }\r\n};//очистить стейт и удалить куки о пользователеw\r\n//####################################################################################################\r\nexport default LoginReducer;\r\n","import axios from \"axios\";\r\n\r\nconst instance=axios.create({\r\n    withCredentials:true,\r\n    baseURL:'https://infinite-sands-36511.herokuapp.com/',\r\n    // headers:{'KEY FOR CONNECTED WITH SERVER':\"12312-12312-SDF-34SDF2\"}\r\n});\r\n//_____________________________________________________________________________________\r\nexport const UserAppAPI={\r\n    exit(){\r\n        return instance.get('exit').then(response=>{\r\n            return response.data\r\n        })\r\n    }\r\n};\r\n//__________________________________________________________________________________\r\nexport const UserLoginAPI= {\r\n    getLoginUser() {\r\n        return instance.get('login').then(response=> {\r\n            return response.data\r\n        })\r\n    },\r\n    enterLoginUser(login,password,remember) {\r\n        return instance.post('login', {login,password,remember}).then(response=> {\r\n            return response.data\r\n        })\r\n    }\r\n};\r\n//___________________________________________________________________________________\r\nexport const UserPostAPI={\r\n\r\n    getProfile(profile) {\r\n        return instance.get(`profile/${profile}`).then(response=> {\r\n            return response.data\r\n        })\r\n    }, //не трогать\r\n    getPost(profile) {\r\n        return instance.get(`profile/post/${profile}`).then(response=> {\r\n            return response.data\r\n        })\r\n    },    //не трогать\r\n\r\n    changeStatus(status){\r\n        return instance.post(`profile/status`,{status}).then(response=> {\r\n            return response.data\r\n        })\r\n    },\r\n    sendPost(post){\r\n        return instance.post(`profile/post/${post.profile}`,{post:post.post}).then(response=> {\r\n            return response.data\r\n        })\r\n    }\r\n};\r\n//_____________________________________________________________________________________\r\nexport const UserMessageAPI={\r\n    messageListFriend() {\r\n\r\n        return instance.get(`message/friend`).then(response=> {\r\n            return response.data\r\n        })\r\n    },\r\n    messageListMessage(profile) {\r\n        return instance.get(`message/list/${profile}`).then(response=> {\r\n            return response.data\r\n        })\r\n    },\r\n    SendMessage(messageText,profile) {\r\n        return instance.post(`message/list/${profile}`, {messageText}).then(response => {\r\n            return response.data\r\n        })}\r\n};\r\n//_____________________________________________________________________________________\r\nexport const UserSubAPI={\r\n    clic(page) {\r\n        return instance.get(`subscribers?page=${page.currentPage}&coun=${page.page}`).then(response=> {\r\n            return response.data\r\n        })\r\n    },\r\n    subScribe(friend) {\r\n        return instance.post('subscribers',{id:friend.IdFriend, friend:friend.friend}).then(response=> {\r\n            return response.data\r\n        })\r\n    },\r\n};\r\n//_____________________________________________________________________________________\r\n\r\n","import {UserPostAPI} from \"../../api/api\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nlet profile={\r\n    IsProfile:false\r\n\r\n    ,profile:[]\r\n    ,post:[]\r\n\r\n    ,loading: true\r\n};\r\n//#####################################################################\r\nconst ProfileReducer=(state=profile, action)=> {\r\n\r\n    switch (action.type) {\r\n//##############################################\r\n        case \"SET-PROFILE\"  :return {\r\n             ...state\r\n            ,IsProfile:action.profile[0]\r\n            ,profile:{\r\n                 id:action.profile[1].id\r\n                ,status:action.profile[1].status\r\n                ,location:action.profile[1].location\r\n                ,fullName:{\r\n                          name:action.profile[1].fullName.name\r\n                         ,lastName:action.profile[1].fullName.lastName\r\n                }\r\n                ,friend:[...action.profile[1].friend]\r\n                ,picture:action.profile[1].picture\r\n            }\r\n        };\r\n        case \"SET-POST\"     :return {\r\n             ...state\r\n            ,IsProfile:action.post[0]\r\n            ,post: [...action.post[1]]\r\n        };\r\n        case 'LOADING'      :return {\r\n             ...state\r\n            ,loading: action.loading\r\n        };\r\n//#################################################\r\n        case \"PUSH-POST\"    :\r\n            state.post.push(  {user: action.post.user, post:action.post.post}  );\r\n            return{\r\n             ...state\r\n        };\r\n        case \"EDIT-STATUS\"  :\r\n            state.profile.status=action.status;\r\n            return {\r\n                ...state\r\n            };\r\n//#################################################\r\n        default             :return state\r\n                         }};\r\n\r\n//$$$$$$___Action for ComponentDid Mount or ComponentDidUpdate____$$$$$\r\nexport\tlet SetProfile =(profile)=>  ({type: \"SET-PROFILE\"  ,profile});\r\nexport\tlet SetPost =(post)=>  ({type: \"SET-POST\",post});\r\nexport\tlet Loading=(loading)=>({type:'LOADING', loading});\r\n//$$$$$$___Action for changing state____$$$$$\r\nexport const editStatus=(status)=>({type:\"EDIT-STATUS\", status});\r\nexport const pushPost=(post)=>({type:\"PUSH-POST\", post});\r\n//####################################################################################################\r\n\r\n//$$$$$$___Thunk for send on Server____$$$$$\r\n\r\n//ВСЯ ИНФОРМАЦИЯ О ПОЛЬЗОВАТЕЛЕ\r\nexport const GetProfile= (userID)=>async (dispatch) =>{\r\n        dispatch(Loading(true));\r\n        let data = await UserPostAPI.getProfile(userID)\r\n            if(data) {\r\n            Cookies.set('profile', userID);\r\n            dispatch( SetProfile(data) );\r\n            }\r\n};//поолучить пользователя\r\nexport const GetPost=(userID)=>async (dispatch) =>{\r\n        let data=await UserPostAPI.getPost(userID);\r\n            if(data) {\r\n            dispatch(SetPost(data));\r\n            dispatch(Loading(false));\r\n            }\r\n}//получить список постов\r\n//$$$$$$___Action for ComponentDid Mount or ComponentDidUpdate____$$$$$\r\n// ВОЗМОЖНОСТИ ПОЛЬЗОВАТЕЛЯ\r\nexport const SendStatus=(status)=>async (dispatch) =>{\r\n        dispatch(Loading(true));\r\n        let data=await UserPostAPI.changeStatus(status)\r\n            if(data) {\r\n            dispatch(editStatus(status));\r\n            dispatch(Loading(false));\r\n            }\r\n};//изменить статус\r\nexport const SendPost=(post)=>async (dispatch) =>{\r\n        dispatch(Loading(true));\r\n        let data=await UserPostAPI.sendPost(post);\r\n            if(data) {\r\n            dispatch(pushPost(post));\r\n            dispatch(Loading(false));\r\n            }\r\n};//добавить пост\r\n//####################################################################################################\r\nexport default ProfileReducer;\r\n","import {UserMessageAPI} from \"../../api/api\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nlet message={\r\n     message:[]\r\n    ,friend:[]\r\n\r\n    ,loading: false\r\n};\r\n//#####################################################################\r\nconst MessageReducer=(state=message, action)=> {\r\n    switch (action.type) {\r\n//##############################################\r\n        case \"SET-FRIEND\"   :return {\r\n             ...state\r\n            ,userEntry:action.friend[0]\r\n            ,friend: [...action.friend[1]]\r\n        };\r\n        case \"SET-MESSAGE\"  :return {\r\n             ...state\r\n            ,userEntry:action.message[0]\r\n            ,message:[...action.message[1]]\r\n        };\r\n        case 'LOADING'      :return {\r\n             ...state\r\n            ,loading: action.loading\r\n        };\r\n//#################################################\r\n        case \"PUSH-MESSAGE\" :\r\n            state.message.push(  {user:action.message.user, message:action.message.message}  );\r\n            return{\r\n             ...state\r\n             ,message: [...state.message]\r\n        };\r\n//#################################################\r\n        default             :return state\r\n    }\r\n};\r\n//#####################################################################\r\n//Action for ComponentDid Mount or ComponentDidUpdate\r\nexport\tlet SetMessage=(message)=>({type: \"SET-MESSAGE\" ,message});\r\nexport\tlet SetFriend=(friend)=>({type: \"SET-FRIEND\",friend});\r\nexport\tlet Loading=(loading)=>({type:'LOADING', loading});\r\n//############################################################################\r\n//Action for changing state\r\nexport const pushMessage=(message)=>({type:\"PUSH-MESSAGE\", message});\r\n//############################################################################\r\nexport const GetListMessages= (profile)=>async (dispatch) =>{\r\n        dispatch(Loading(true));\r\n        let data = await UserMessageAPI.messageListMessage(profile);\r\n            if(data) {\r\n            Cookies.set('message', profile);\r\n            dispatch(SetMessage(data));\r\n            dispatch(Loading(false));\r\n            }\r\n};//получить список сообщений\r\nexport const GetListFriend=()=>async (dispatch) =>{\r\n        dispatch(Loading(true));\r\n        let data= await UserMessageAPI.messageListFriend();\r\n            if(data) {\r\n            dispatch(SetFriend(data));\r\n            dispatch(Loading(false));\r\n            }\r\n};//получить список друзей\r\nexport const SendMessage= (id, message)=>async (dispatch) => {\r\n        dispatch(Loading(true));\r\n        message={user: id,message:message};\r\n        let data= await UserMessageAPI.SendMessage(message.message);\r\n            if(data) {\r\n            dispatch(pushMessage(message));\r\n            dispatch(Loading(false));\r\n            }\r\n};//отправить сообщение\r\n//####################################################################################################\r\nexport default MessageReducer;\r\n","import {UserSubAPI} from \"../../api/api\";\r\n\r\nlet people={\r\n    people:{people:[],allPeople: 0}\r\n    ,loading: false\r\n}\r\n//#####################################################################\r\nconst PeopleReducer=(state=people, action)=> {\r\n    switch (action.type) {\r\n//##############################################\r\n        case \"GET-USERS\"    :return {\r\n             ...state\r\n            ,people:{\r\n                 people:[...action.people[0]]\r\n                ,allPeople:action.people[1]\r\n             }\r\n        };\r\n        case 'LOADING'      :return {\r\n             ...state\r\n            ,loading: action.loading\r\n        };\r\n//#################################################\r\n        case \"FOLLOW-PEOPLE\":\r\n            state.people.people.filter( x=>(x.id===action.follow.IdFriend?x.friend=action.follow.friend:'') );\r\n            return{\r\n             ...state,\r\n        };\r\n//#################################################\r\n        default             :return state\r\n    }};\r\n//#####################################################################\r\n//Action for ComponentDid Mount or ComponentDidUpdate\r\nexport\tlet SetPeople=(people)=>({type:\"GET-USERS\",people});\r\nexport\tlet Loading=(loading)=>({type:'LOADING', loading});\r\n//############################################################################\r\n//Action for changing state\r\nexport const followPeople=(follow)=>({type:\"FOLLOW-PEOPLE\", follow});\r\n//####################################################################################################\r\nexport const GetUser=(page)=> async (dispatch) =>{\r\n        dispatch(Loading(true));\r\n        let data=await UserSubAPI.clic(page);\r\n            if(data) {\r\n                dispatch(SetPeople(data));\r\n                dispatch(Loading(false));\r\n            }\r\n};\r\nexport const FollowPeople=(friend)=>async (dispatch) =>{\r\n        dispatch(Loading(true));\r\n        let data=await UserSubAPI.subScribe(friend);\r\n            if(data) {\r\n                dispatch(followPeople(friend));\r\n                dispatch(Loading(false));\r\n            }\r\n};\r\n//####################################################################################################\r\n\r\n\r\nexport default PeopleReducer;\r\n"],"sourceRoot":""}