{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","hoc/withAuthRedirect.js","conponent/load.js","conponent/pic/829.svg","Content/Messages/listFriend/ListFriend.js","user-selector/MessageSelector.js","Content/Messages/ComponentMessage/FormToSend.js","Content/Messages/listFriend/ListParty.js","Content/Messages/listMessages/ListMessage.js","Content/Messages/MessageCont.jsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","StateTo","state","LoginReducer","withAuthRedirect","Component","RediComp","this","props","status","to","React","connect","LoAd","id","className","src","loaD","alt","module","exports","ListFriend","memo","DialogItem","friend","map","Description","PhotoMin","origin","default","Nickname","e","join","Status","setting","type","onClick","itsRename","_id","getMessage","MessageReducer","Message","getFriend","Friend","getParty","Party","FormToSend","document","addEventListener","console","log","ctrlKey","code","onChange","action","target","text","ListParty","party","AvaParty","onDoubleClick","list","ListPeople","NameParty","NumberOfPerson","admin","filter","r","user","ListMessage","messageItem","profile","message","img","date","NumberMessage","compose","GetListFriend","GetListMessages","SendMessage","SendSetting","GetListParty","deleteParty","withRouter","useState","setText","setImg","nameParty","setNameParty","selectedFriend","setSelectedFriend","selectedParty","setSelectedParty","setMessage","setFriend","setParty","setProfile","setSetting","setList","useEffect","name","Date","toTimeString","replace","f","faq","indexOf","splice","command","b","bea","loading","placeholder"],"mappings":"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","file":"static/js/3.9a944b68.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react'\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet StateTo = (state) => ({state: state.LoginReducer});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RediComp extends React.Component {\r\n\r\n        render() {\r\n            return (\r\n                this.props.state.status\r\n                    ? <Component {...this.props} />\r\n                    : <Redirect to={`/login`}/>\r\n            )\r\n        }\r\n    }\r\n\r\n    let ConnectedAuth = connect(StateTo)(RediComp);\r\n\r\n    return ConnectedAuth\r\n};\r\n\r\n","import loaD from \"./pic/829.svg\";\r\nimport React from \"react\";\r\n\r\nlet LoAd = () => {\r\n    return <div id={'place-loading'}>\r\n                <div className={'Loading'}>\r\n                    <img src={loaD} alt={'PIC'}/>\r\n                </div>\r\n    </div>\r\n}\r\nexport default LoAd;","module.exports = __webpack_public_path__ + \"static/media/829.14706964.svg\";","import React from 'react'\r\nimport '../../../style/App.css';\r\n\r\nlet ListFriend = React.memo(props => {\r\n    debugger\r\n    let DialogItem = props.friend.map((i) => { return (\r\n        // onDoubleClick={() => {props.itsRename('PROFILE', {list:[i._id], id:false});}}\r\n       <div className={\"List-item-Party-Friend\"}>\r\n           <img id={\"ava-min\"} src={i.Description.PhotoMin.origin || i.Description.PhotoMin.default} alt={\"Pic\"}/>\r\n           <div id={'text-description-friend-party'}>\r\n                <div>{i.Description.Nickname.map(e=>e).join(' ')}</div>\r\n                <div>{i.Description.Status}</div>\r\n           </div>\r\n           {props.setting && <input type={'checkbox'} onClick={()=>{props.itsRename(\"SELECTED-FRIEND\", i._id)}}/>}\r\n       </div>\r\n    )});\r\n    return <div>\r\n        {DialogItem}\r\n    </div>\r\n});\r\n\r\nexport default ListFriend;\r\n\r\n\r\n\r\n","export const getMessage = (state) => {\r\n    debugger\r\n    return state.MessageReducer.Message\r\n};\r\nexport const getFriend = (state) => {\r\n    return state.MessageReducer.Friend\r\n};\r\nexport const getParty = (state) => {\r\n    return state.MessageReducer.Party\r\n};\r\n\r\n","import React, {useEffect} from 'react'\r\n\r\nlet FormToSend = props => {\r\n\r\n\r\n\r\n    let io=(action)=>{\r\n        props.itsRename('TEXT',action.target.value)\r\n    }\r\n\r\n    document.addEventListener('keypress', e=>{\r\n        console.log(e);\r\n        e.ctrlKey && e.code==='Enter' && props.itsRename('SEND')\r\n    });\r\n    console.log(document)\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                   <textarea onChange={io} >{props.text}</textarea>\r\n                   <input id='send-mess' type={'reset'} onClick={()=>props.itsRename('SEND')} value={'send'} />\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default FormToSend;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport '../../../style/App.css';\r\n\r\nlet ListParty = React.memo(props => {\r\n    let DialogItem = props.party.map((i) => {return (\r\n        <div className={\"List-item-Party-Friend\"}>\r\n            <span >\r\n                <img id={\"ava-min\"} src={i.AvaParty} alt={\"Pic\"} onDoubleClick={() => {props.itsRename('PROFILE', {list:i.ListPeople, id:i._id});}}/>\r\n            </span>\r\n            <span>\r\n               <div>{i.NameParty.map(e=>e).join(' ')||'Name Party'} , {i.NumberOfPerson}</div>\r\n            </span>\r\n            {\r\n              i.admin.filter(r=>r===props.user).length!==0\r\n              ? props.setting && <input type={'checkbox'} onClick={()=>{props.itsRename(\"SELECTED-PARTY\", i._id)}} />\r\n              : props.setting && <button onClick={()=>{props.itsRename(\"LEAVING-THE-PARTY\", i._id)}}>Leave</button>\r\n            }\r\n        </div>\r\n    )});\r\n    return (<div >\r\n            {DialogItem}\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default ListParty;\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nlet ListMessage = React.memo(props => {\r\n\r\n    let messageItem =props.profile.id && props.message!==0 && props.message.ListMessage.map(i => {\r\n            return <div>\r\n                {\r\n                    props.user === i.user\r\n                        ? <div className={\"MESSAGE_ITEM\"} id={'USER'}>\r\n                            <div>\r\n                                {i.text}\r\n                                {i.img !== '' && <img alt={'Pic Send for you'} src={i.img}/>}\r\n                            </div>\r\n                            <div>{i.date}</div>\r\n                        </div>\r\n                        : <div className={\"MESSAGE_ITEM\"} id={'PROFILE'}>\r\n                            <div>{i.text}</div>\r\n                            <div>{i.date}</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        }\r\n    );\r\n    return (\r\n        <div className={\"MESSAGE_LIST\"}>\r\n            <div>\r\n                {\r\n                    props.profile.id && <span><img id={\"ava-min\"}\r\n                     src={props.message.AvaParty}\r\n                     alt={\"Pic\"}/></span>\r\n                }\r\n                {\r\n                    props.profile.id\r\n                    && <span>Name Party {props.message.NameParty.map(e=>e).join(' ')}, numb Person {props.message.NumberOfPerson}, numb message {props.message.NumberMessage}</span>\r\n                }\r\n            </div>\r\n            {\r\n                props.profile.id\r\n                && <div>{messageItem}</div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n})\r\nexport default ListMessage;","import React, {useEffect, useState} from 'react';\r\nimport '../../style/App.css';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {withRouter} from \"react-router\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport ListFriend from \"./listFriend/ListFriend\";\r\nimport LoAd from \"../../conponent/load\";\r\nimport {deleteParty,GetListFriend,GetListMessages,GetListParty,SendMessage,SendSetting} from \"./MessageReducer\";\r\nimport {getFriend, getMessage, getParty} from \"../../user-selector/MessageSelector\";\r\nimport FormToSend from \"./ComponentMessage/FormToSend\";\r\nimport ListParty from \"./listFriend/ListParty\";\r\nimport ListMessage from \"./listMessages/ListMessage\";\r\n\r\nconst MessageCont= props => {\r\n\r\n\r\n    let [text, setText] = useState('');\r\n    let [img, setImg] = useState('');\r\n    let [nameParty, setNameParty]= useState('');\r\n\r\n    let [selectedFriend, setSelectedFriend]=useState([props.state.user]);\r\n    let [selectedParty, setSelectedParty]=useState([]);\r\n\r\n    let [message,setMessage]=useState([]);\r\n    let [friend,setFriend]=useState([]);\r\n    let [party,setParty]=useState([]);\r\n\r\n    let [user, setUser]=useState(props.state.user);\r\n    let [profile, setProfile] = useState({id:false,list:[]});\r\n\r\n    let [setting, setSetting]=useState(false);\r\n    let [list, setList]= useState(false);\r\n\r\n    useEffect(() => {\r\n        list?props.GetListFriend():props.GetListParty();\r\n    }, [list,setting]);\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        props.GetListMessages(profile);\r\n    }, [profile]);\r\n    useEffect(() => {\r\n        debugger\r\n        setText(text);\r\n    }, [text]);\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        setMessage(props.message);\r\n        setFriend(props.friend)\r\n        setParty(props.party)\r\n    }, [props.message, props.friend, props.party]);\r\n\r\n\r\n\r\n\r\n    let itsRename=(name,value)=> {\r\n        switch (name) {\r\n            case \"TEXT\" :return  setText(value);\r\n            case \"IMG\" :return setImg(value);\r\n            case \"PROFILE\" :debugger\r\n                return setProfile(value);\r\n            case \"NAME-PARTY\" :return setNameParty(value);\r\n            case \"SEND\" :\r\n                setText(' ')\r\n                return props.SendMessage({\r\n                    'idParty':profile.id\r\n                    ,'dialog':profile.list\r\n                    ,'user':user\r\n                    ,'text':text\r\n                    ,'img':img\r\n                    ,'date':new Date().toTimeString().replace(/ .*/, '')\r\n            });\r\n            case \"SETTING\" :return setSetting(value);\r\n            case \"SELECTED-FRIEND\" : debugger\r\n                let f=selectedFriend ,fa=f.filter(r=>r===value).length;\r\n                if (fa!==0){\r\n                    let faq=f.indexOf(value);\r\n                    f.splice(faq,faq+1)\r\n                }else{\r\n                    f.push(value)\r\n                }\r\n                return setSelectedFriend(f);\r\n            case \"SELECTED-FRIEND-ADD-PARTY\" : debugger\r\n\r\n                selectedFriend.length>1 && props.SendSetting({command:'FRI-ADD-PARTY',list:selectedFriend, nameParty:nameParty});\r\n                return setSetting(true);\r\n            case \"SELECTED-PARTY\" :\r\n                let b=selectedParty, be=b.filter(r=>r===value).length;\r\n                if (be!==0){\r\n                    let bea=b.indexOf(value);\r\n                    b.splice(bea,bea+1)\r\n                }else{\r\n                    b.push(value)\r\n                }\r\n                return setSelectedParty(b);\r\n            case \"SELECTED-PARTY-DEL\" : debugger\r\n                setSetting(true);\r\n                props.SendSetting({command:'PAR-DEL',list:selectedParty});\r\n                return setProfile({id:false, list:[]});\r\n            case \"LEAVING-THE-PARTY\" :\r\n                props.SendSetting({command:'LEAVING-THE-PARTY',list:value});\r\n                return setSetting(true);\r\n            default :\r\n                return 'null method'\r\n        }\r\n    };\r\n\r\n    let goInput=(action)=>{itsRename(action.target.name, action.target.value)};\r\n\r\n    return <div className={'Message'}>\r\n\r\n                  {props.state.loading && <div><LoAd/></div>}\r\n\r\n                <div className={'List-Message'}>\r\n                     <ListMessage message={message} user={user} profile={profile} />\r\n                     {profile.id && <FormToSend itsRename={itsRename} text={text} />}\r\n                </div>\r\n\r\n                <div className={'List-Party-Friend'}>\r\n\r\n                    <div onClick={()=>{setList(!list)}} id={'Button-Message'}>{list?'Friend':'Party'}</div>\r\n\r\n                    <div>\r\n                          {list\r\n                          ?<div>\r\n                            {setting\r\n                             ?<div className={'Button-Flex'}>\r\n                                   <div onClick={()=>{itsRename(\"SELECTED-FRIEND-ADD-PARTY\")}}\r\n                                        id={'Button-Message'}\r\n                                   >\r\n                                   {'Done'}\r\n                                   </div>\r\n\r\n                                    <div onClick={()=>{setSetting(!setting)}}\r\n                                         id={'Button-Message'}\r\n                                    >\r\n                                    {'Cancel'}\r\n                                    </div>\r\n                             </div>\r\n                             :<div onClick={()=>{setSetting(true)}} id={'Button-Message'} className={'Create-Place'}>\r\n                                {'Create Party'}\r\n                             </div>\r\n                            }\r\n                             <div>\r\n                                  {setting && <input onChange={goInput}\r\n                                                     name={'NAME-PARTY'}\r\n                                                     value={nameParty}\r\n                                                     id={'input-name'}\r\n                                                     placeholder=\"Entry nickname Party\"\r\n                                  />}\r\n                             </div>\r\n                          </div>\r\n                          :<span>\r\n                               { setting\r\n                                ?<div className={'Button-Flex'}>\r\n                                     <div onClick={()=>{itsRename(\"SELECTED-PARTY-DEL\")}} id={'Button-Message'}>\r\n                                     {'Done'}\r\n                                     </div>\r\n                                <div onClick={()=>{setSetting(!setting)}} id={'Button-Message'}>\r\n                                     {'Cancel'}\r\n                                </div>\r\n                                </div>\r\n                                        :<span>\r\n                                              <div onClick={()=>{setSetting(true)}} id={'Button-Message'}>\r\n                                                  {setting?'Done':'Deleted Party'}\r\n                                              </div>\r\n                                        </span>\r\n                                      }\r\n                                </span>\r\n                                }\r\n                             <div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className={'List-Friend'}>\r\n                                               {\r\n                                                 list &&  <ListFriend friend={friend}\r\n                                                                            itsRename={itsRename}\r\n                                                                            selectedFriend={selectedFriend}\r\n                                                                            setting={setting}/>\r\n                                               }\r\n\r\n                                               {\r\n                                                 !list &&  <ListParty party={party}\r\n                                                                            user={user}\r\n                                                                            itsRename={itsRename}\r\n                                                                            selectedParty={selectedParty}\r\n                                                                            setting={setting}/>\r\n                                               }\r\n                          </div>\r\n                </div>\r\n    </div>\r\n};\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state.LoginReducer.user\r\n\r\n        , message: getMessage(state)\r\n        , friend: getFriend(state)\r\n        , party: getParty(state)\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {GetListFriend, GetListMessages, SendMessage, SendSetting ,GetListParty,deleteParty})\r\n    , withRouter\r\n    , withAuthRedirect\r\n)(MessageCont)"],"sourceRoot":""}