{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","conponent/load.js","conponent/pic/829.svg","Content/Messages/listFriend/ListFriend.js","user-selector/MessageSelector.js","Content/Messages/ComponentMessage/FormToSend.js","Content/Messages/listFriend/ListParty.js","Content/Messages/listMessages/ListMessage.js","Content/Messages/MessageCont.jsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","LoAd","id","className","src","loaD","alt","module","exports","ListFriend","React","memo","props","DialogItem","friend","map","Description","PhotoMin","origin","default","Nickname","e","join","Status","setting","type","onClick","itsRename","_id","getMessage","state","MessageReducer","Message","getFriend","Friend","getParty","Party","FormToSend","document","addEventListener","console","log","ctrlKey","code","onChange","action","target","text","ListParty","party","AvaParty","onDoubleClick","list","ListPeople","NameParty","NumberOfPerson","admin","filter","r","user","ListMessage","messageItem","profile","message","img","date","NumberMessage","compose","connect","LoginReducer","GetListFriend","GetListMessages","SendMessage","SendSetting","GetListParty","deleteParty","withRouter","withAuthRedirect","useState","setText","setImg","nameParty","setNameParty","selectedFriend","setSelectedFriend","selectedParty","setSelectedParty","setMessage","setFriend","setParty","setProfile","setSetting","setList","useEffect","name","Date","toTimeString","replace","f","faq","indexOf","splice","command","b","bea","loading","placeholder"],"mappings":"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","file":"static/js/3.a53ded60.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import loaD from \"./pic/829.svg\";\r\nimport React from \"react\";\r\n\r\nlet LoAd = () => {\r\n    return <div id={'place-loading'}>\r\n                <div className={'Loading'}>\r\n                    <img src={loaD} alt={'PIC'}/>\r\n                </div>\r\n    </div>\r\n}\r\nexport default LoAd;","module.exports = __webpack_public_path__ + \"static/media/829.14706964.svg\";","import React from 'react'\r\nimport '../../../style/App.css';\r\n\r\nlet ListFriend = React.memo(props => {\r\n    debugger\r\n    let DialogItem = props.friend.map((i) => { return (\r\n        // onDoubleClick={() => {props.itsRename('PROFILE', {list:[i._id], id:false});}}\r\n       <div className={\"List-item-Party-Friend\"}>\r\n           <img id={\"ava-min\"} src={i.Description.PhotoMin.origin || i.Description.PhotoMin.default} alt={\"Pic\"}/>\r\n           <div id={'text-description-friend-party'}>\r\n                <div>{i.Description.Nickname.map(e=>e).join(' ')}</div>\r\n                <div>{i.Description.Status}</div>\r\n           </div>\r\n           {props.setting && <input type={'checkbox'} onClick={()=>{props.itsRename(\"SELECTED-FRIEND\", i._id)}}/>}\r\n       </div>\r\n    )});\r\n    return <div>\r\n        {DialogItem}\r\n    </div>\r\n});\r\n\r\nexport default ListFriend;\r\n\r\n\r\n\r\n","export const getMessage = (state) => {\r\n    debugger\r\n    return state.MessageReducer.Message\r\n};\r\nexport const getFriend = (state) => {\r\n    return state.MessageReducer.Friend\r\n};\r\nexport const getParty = (state) => {\r\n    return state.MessageReducer.Party\r\n};\r\n\r\n","import React, {useEffect} from 'react'\r\n\r\nlet FormToSend = props => {\r\n\r\n\r\n\r\n    let io=(action)=>{\r\n        props.itsRename('TEXT',action.target.value)\r\n    }\r\n\r\n    document.addEventListener('keypress', e=>{\r\n        console.log(e);\r\n        e.ctrlKey && e.code==='Enter' && props.itsRename('SEND')\r\n    });\r\n    console.log(document)\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                   <textarea onChange={io} >{props.text}</textarea>\r\n                   <input id='send-mess' type={'reset'} onClick={()=>props.itsRename('SEND')} value={'send'} />\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default FormToSend;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport '../../../style/App.css';\r\n\r\nlet ListParty = React.memo(props => {\r\n    let DialogItem = props.party.map((i) => {return (\r\n        <div className={\"List-item-Party-Friend\"}>\r\n            <span >\r\n                <img id={\"ava-min\"} src={i.AvaParty} alt={\"Pic\"} onDoubleClick={() => {props.itsRename('PROFILE', {list:i.ListPeople, id:i._id});}}/>\r\n            </span>\r\n            <span>\r\n               <div>{i.NameParty.map(e=>e).join(' ')||'Name Party'} , {i.NumberOfPerson}</div>\r\n            </span>\r\n            {\r\n              i.admin.filter(r=>r===props.user).length!==0\r\n              ? props.setting && <input type={'checkbox'} onClick={()=>{props.itsRename(\"SELECTED-PARTY\", i._id)}} />\r\n              : props.setting && <button onClick={()=>{props.itsRename(\"LEAVING-THE-PARTY\", i._id)}}>Leave</button>\r\n            }\r\n        </div>\r\n    )});\r\n    return (<div >\r\n            {DialogItem}\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default ListParty;\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nlet ListMessage = React.memo(props => {\r\n\r\n    let messageItem =props.profile.id && props.message!==0 && props.message.ListMessage.map(i => {\r\n            return <div>\r\n                {\r\n                    props.user === i.user\r\n                        ? <div className={\"MESSAGE_ITEM\"} id={'USER'}>\r\n                            <div>\r\n                                {i.text}\r\n                                {i.img !== '' && <img alt={'Pic Send for you'} src={i.img}/>}\r\n                            </div>\r\n                            <div>{i.date}</div>\r\n                        </div>\r\n                        : <div className={\"MESSAGE_ITEM\"} id={'PROFILE'}>\r\n                            <div>{i.text}</div>\r\n                            <div>{i.date}</div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        }\r\n    );\r\n    return (\r\n        <div className={\"MESSAGE_LIST\"}>\r\n            <div>\r\n                {\r\n                    props.profile.id && <span><img id={\"ava-min\"}\r\n                     src={props.message.AvaParty}\r\n                     alt={\"Pic\"}/></span>\r\n                }\r\n                {\r\n                    props.profile.id\r\n                    && <span>Name Party {props.message.NameParty.map(e=>e).join(' ')}, numb Person {props.message.NumberOfPerson}, numb message {props.message.NumberMessage}</span>\r\n                }\r\n            </div>\r\n            {\r\n                props.profile.id\r\n                && <div>{messageItem}</div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n})\r\nexport default ListMessage;","import React, {useEffect, useState} from 'react';\r\nimport '../../style/App.css';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {withRouter} from \"react-router\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport ListFriend from \"./listFriend/ListFriend\";\r\nimport LoAd from \"../../conponent/load\";\r\nimport {deleteParty,GetListFriend,GetListMessages,GetListParty,SendMessage,SendSetting} from \"./MessageReducer\";\r\nimport {getFriend, getMessage, getParty} from \"../../user-selector/MessageSelector\";\r\nimport FormToSend from \"./ComponentMessage/FormToSend\";\r\nimport ListParty from \"./listFriend/ListParty\";\r\nimport ListMessage from \"./listMessages/ListMessage\";\r\n\r\nconst MessageCont= props => {\r\n\r\n\r\n    let [text, setText] = useState('');\r\n    let [img, setImg] = useState('');\r\n    let [nameParty, setNameParty]= useState('');\r\n\r\n    let [selectedFriend, setSelectedFriend]=useState([props.state.user]);\r\n    let [selectedParty, setSelectedParty]=useState([]);\r\n\r\n    let [message,setMessage]=useState([]);\r\n    let [friend,setFriend]=useState([]);\r\n    let [party,setParty]=useState([]);\r\n\r\n    let [user, setUser]=useState(props.state.user);\r\n    let [profile, setProfile] = useState({id:false,list:[]});\r\n\r\n    let [setting, setSetting]=useState(false);\r\n    let [list, setList]= useState(false);\r\n\r\n    useEffect(() => {\r\n        list?props.GetListFriend():props.GetListParty();\r\n    }, [list,setting]);\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        props.GetListMessages(profile);\r\n    }, [profile]);\r\n    useEffect(() => {\r\n        debugger\r\n        setText(text);\r\n    }, [text]);\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        setMessage(props.message);\r\n        setFriend(props.friend)\r\n        setParty(props.party)\r\n    }, [props.message, props.friend, props.party]);\r\n\r\n\r\n\r\n\r\n    let itsRename=(name,value)=> {\r\n        switch (name) {\r\n            case \"TEXT\" :return  setText(value);\r\n            case \"IMG\" :return setImg(value);\r\n            case \"PROFILE\" :debugger\r\n                return setProfile(value);\r\n            case \"NAME-PARTY\" :return setNameParty(value);\r\n            case \"SEND\" :\r\n                setText(' ')\r\n                return props.SendMessage({\r\n                    'idParty':profile.id\r\n                    ,'dialog':profile.list\r\n                    ,'user':user\r\n                    ,'text':text\r\n                    ,'img':img\r\n                    ,'date':new Date().toTimeString().replace(/ .*/, '')\r\n            });\r\n            case \"SETTING\" :return setSetting(value);\r\n            case \"SELECTED-FRIEND\" : debugger\r\n                let f=selectedFriend ,fa=f.filter(r=>r===value).length;\r\n                if (fa!==0){\r\n                    let faq=f.indexOf(value);\r\n                    f.splice(faq,faq+1)\r\n                }else{\r\n                    f.push(value)\r\n                }\r\n                return setSelectedFriend(f);\r\n            case \"SELECTED-FRIEND-ADD-PARTY\" : debugger\r\n\r\n                selectedFriend.length>1 && props.SendSetting({command:'FRI-ADD-PARTY',list:selectedFriend, nameParty:nameParty});\r\n                return setSetting(true);\r\n            case \"SELECTED-PARTY\" :\r\n                let b=selectedParty, be=b.filter(r=>r===value).length;\r\n                if (be!==0){\r\n                    let bea=b.indexOf(value);\r\n                    b.splice(bea,bea+1)\r\n                }else{\r\n                    b.push(value)\r\n                }\r\n                return setSelectedParty(b);\r\n            case \"SELECTED-PARTY-DEL\" : debugger\r\n                setSetting(true);\r\n                props.SendSetting({command:'PAR-DEL',list:selectedParty});\r\n                return setProfile({id:false, list:[]});\r\n            case \"LEAVING-THE-PARTY\" :\r\n                props.SendSetting({command:'LEAVING-THE-PARTY',list:value});\r\n                return setSetting(true);\r\n            default :\r\n                return 'null method'\r\n        }\r\n    };\r\n\r\n    let goInput=(action)=>{itsRename(action.target.name, action.target.value)};\r\n\r\n    return <div className={'Message'}>\r\n\r\n                  {props.state.loading && <div><LoAd/></div>}\r\n\r\n                <div className={'List-Message'}>\r\n                     <ListMessage message={message} user={user} profile={profile} />\r\n                     {profile.id && <FormToSend itsRename={itsRename} text={text} />}\r\n                </div>\r\n\r\n                <div className={'List-Party-Friend'}>\r\n\r\n                    <div onClick={()=>{setList(!list)}} id={'Button-Message'}>{list?'Friend':'Party'}</div>\r\n\r\n                    <div>\r\n                          {list\r\n                          ?<div>\r\n                            {setting\r\n                             ?<div className={'Button-Flex'}>\r\n                                   <div onClick={()=>{itsRename(\"SELECTED-FRIEND-ADD-PARTY\")}}\r\n                                        id={'Button-Message'}\r\n                                   >\r\n                                   {'Done'}\r\n                                   </div>\r\n\r\n                                    <div onClick={()=>{setSetting(!setting)}}\r\n                                         id={'Button-Message'}\r\n                                    >\r\n                                    {'Cancel'}\r\n                                    </div>\r\n                             </div>\r\n                             :<div onClick={()=>{setSetting(true)}} id={'Button-Message'} className={'Create-Place'}>\r\n                                {'Create Party'}\r\n                             </div>\r\n                            }\r\n                             <div>\r\n                                  {setting && <input onChange={goInput}\r\n                                                     name={'NAME-PARTY'}\r\n                                                     value={nameParty}\r\n                                                     id={'input-name'}\r\n                                                     placeholder=\"Entry nickname Party\"\r\n                                  />}\r\n                             </div>\r\n                          </div>\r\n                          :<span>\r\n                               { setting\r\n                                ?<div className={'Button-Flex'}>\r\n                                     <div onClick={()=>{itsRename(\"SELECTED-PARTY-DEL\")}} id={'Button-Message'}>\r\n                                     {'Done'}\r\n                                     </div>\r\n                                <div onClick={()=>{setSetting(!setting)}} id={'Button-Message'}>\r\n                                     {'Cancel'}\r\n                                </div>\r\n                                </div>\r\n                                        :<span>\r\n                                              <div onClick={()=>{setSetting(true)}} id={'Button-Message'}>\r\n                                                  {setting?'Done':'Deleted Party'}\r\n                                              </div>\r\n                                        </span>\r\n                                      }\r\n                                </span>\r\n                                }\r\n                             <div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className={'List-Friend'}>\r\n                                               {\r\n                                                 list &&  <ListFriend friend={friend}\r\n                                                                            itsRename={itsRename}\r\n                                                                            selectedFriend={selectedFriend}\r\n                                                                            setting={setting}/>\r\n                                               }\r\n\r\n                                               {\r\n                                                 !list &&  <ListParty party={party}\r\n                                                                            user={user}\r\n                                                                            itsRename={itsRename}\r\n                                                                            selectedParty={selectedParty}\r\n                                                                            setting={setting}/>\r\n                                               }\r\n                          </div>\r\n                </div>\r\n    </div>\r\n};\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        state: state.LoginReducer.user\r\n\r\n        , message: getMessage(state)\r\n        , friend: getFriend(state)\r\n        , party: getParty(state)\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {GetListFriend, GetListMessages, SendMessage, SendSetting ,GetListParty,deleteParty})\r\n    , withRouter\r\n    , withAuthRedirect\r\n)(MessageCont)"],"sourceRoot":""}