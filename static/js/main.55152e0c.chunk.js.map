{"version":3,"sources":["Content/Messages/MessageReducer.js","Content/People/PeopleReducer.js","api/api.js","conponent/pic/829.svg","serviceWorker.js","Content/Login/LoginReducer.js","Content/Registration/RegistrationReducer.js","reduxStore.js","Header/MenuB.js","Header/Logo.jsx","utils/validator/validator.js","Header/MenuHeader.js","Content/ContentCont.js","conponent/FormsControll/FormsControll.js","Content/Login/Login.js","hoc/step2redirectInProfiles.js","Content/Login/LoginCont.js","Content/Registration/Registration.js","user-selector/RegistrationSelector.js","hoc/RegistrationOnLogin.js","Content/Registration/RegistrationCont.js","App.js","index.js","user-selector/LoginSelector.js","hoc/withAuthRedirect.js","conponent/load.js","Content/Profile/ProfileReducer.js"],"names":["timerId","message","Message","ListMessage","AvaParty","NameParty","Friend","Party","Profile","id","list","Loading","SetMessage","type","pushMessage","deleteParty","deleted","addProfile","profile","GetListMessages","dispatch","Async","a","clearTimeout","timer","request","data","d","window","setTimeout","UserMessageAPI","messageListMessage","Cookies","set","console","log","GetListFriend","messageListFriend","friend","GetListParty","messageListParty","SendMessage","myElement","document","getElementById","scrollTop","scrollHeight","SendSetting","setting","MessageReducer","state","action","user","text","img","date","i","r","findIndex","_id","splice","length","loading","people","SetPeople","SetCurrent","current","GetUser","page","UserSubAPI","getPeople","FollowPeople","subScribe","follow","PeopleReducer","f","filter","friendStatus","instance","axios","create","withCredentials","baseURL","UserAppAPI","exit","get","then","response","registration","form","post","Login","login","Password","password","Nickname","name","UserLoginAPI","getUserFromServer","sendUserFormServer","value","UserProfitAPI","getProfileFromServer","sendInformation","inform","tags","nickname","module","exports","Boolean","location","hostname","match","loginization","status","String","Object","SettingUserDispatch","Exit","LoginReducer","RegistrationStatus","RegistrationMessage","RegistrationReducer","mess","reducers","combineReducers","ProfileReducer","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","connect","props","className","to","src","onClick","Logo","maxLength","MenuHeader","ProfileCont","lazy","MessageCont","PeopleCont","peo","withAuthRedirect","Content","fallback","path","render","required","minLengthCreator","minLength","undefined","userEntry","zzzz","test","Input","input","meta","error","touched","minLength6","ReduxLoginForm","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","redirectInProfiles","Component","ComponentRedirect","History","localStorage","this","Dialog","React","userStatus","getLoginUser","getUserEntry","GetUserFromServer","SendUserFormForServer","formData","stopSubmit","_error","useEffect","maxLength16","ReduxRegistrationForm","RegistrationCont","EntryForm","RegistrationThunk","PureComponent","FormRegistration","App","ReactDOM","navigator","serviceWorker","ready","unregister","getLoading","StateTo","RediComp","LoAd","loaD","alt","profileState","EditInform","GetProfileFromServer","profileNickname","profilePhoto","Photo","origin","default","profilePhotoMin","PhotoMin","profileStatus","Status","profileLocation","Location","profileAge","Age","profileSkills","Skills","profileTags","Tags","profileGender","Gender","photo","age","skills","gender"],"mappings":"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","file":"static/js/main.55152e0c.chunk.js","sourcesContent":["import {UserMessageAPI} from \"../../api/api\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nlet timerId\r\n\r\nlet message = {\r\n    Message:{ListMessage:[],AvaParty:'',NameParty:['']}\r\n    ,Friend:[]\r\n    ,Party:[]\r\n    ,Profile:{id:false,list:[]}\r\n    ,Loading:false\r\n};\r\n//#####################################################################\r\nconst MessageReducer = (state = message, action) => {\r\n    debugger\r\n    switch (action.type) {\r\n//##############################################\r\n        case \"SET-FRIEND\"  :\r\n            return {\r\n                ...state\r\n                , Friend: action.friend.Friend\r\n            };\r\n        case \"SET-PARTY\"  :\r\n            return {\r\n                ...state\r\n                , Party: action.friend.Party\r\n            };\r\n        case \"SET-MESSAGE\"  :\r\n            return {\r\n                ...state\r\n                , Message: action.message\r\n            };\r\n//#################################################\r\n        case \"PUSH-MESSAGE\" :\r\n            return {\r\n                ...state\r\n                ,Message: {... state.Message, ListMessage:[...state.Message.ListMessage,{\r\n                        user: action.message.user\r\n                        , text: action.message.text\r\n                        , img:action.message.img\r\n                        ,date:action.message.date}\r\n                        ]\r\n                }\r\n            };\r\n        case \"DELETED-MESSAGE\" :\r\n            for(let i=0;i<action.deleted.list.length;i++){\r\n                let r=state.Party.findIndex(r=>r._id===action.deleted.list[i]);\r\n                state.Party.splice(r,r+1)\r\n            }\r\n            return {\r\n                ...state\r\n            };\r\n        case \"PROFILE\":\r\n            return {\r\n              ...state\r\n              , Profile:action.profile\r\n            };\r\n        case 'LOADING':\r\n            return {\r\n                ...state\r\n                ,Loading:action.loading\r\n            }\r\n//#################################################\r\n        default             :\r\n            return state\r\n    }\r\n};\r\n//#####################################################################\r\n//Action for ComponentDid Mount or ComponentDidUpdate\r\nexport let SetMessage = (message) => ({type: \"SET-MESSAGE\", message});\r\nexport let SetFriend = (friend) => ({type: \"SET-FRIEND\", friend});\r\nexport let SetParty = (friend) => ({type: \"SET-PARTY\", friend});\r\nexport let setLoading = (loading) => ({type: \"LOADING\", loading});\r\n//############################################################################\r\n//Action for changing state\r\nexport const pushMessage = (message) => ({type: \"PUSH-MESSAGE\", message});\r\nexport const deleteParty = (deleted) => ({type: \"DELETED-MESSAGE\", deleted});\r\nexport const addProfile = (profile) => ({type: \"PROFILE\", profile});\r\n//############################################################################\r\nexport const GetListMessages = (profile) => async (dispatch) => {\r\n    if(profile.id) {\r\n        let timer=(profile)=>{\r\n            let d=1,request,data;\r\n                timerId = window.setTimeout(request= async () => {\r\n\r\n                    data = await UserMessageAPI.messageListMessage(profile);\r\n                    if (data) {\r\n                        Cookies.set('message', profile);\r\n                        dispatch(SetMessage(data));\r\n                    }\r\n                    d++;\r\n                    if (d < 3) {\r\n                        timerId = setTimeout(request, 20000)\r\n                    } else {\r\n                        clearTimeout(timerId)\r\n                        console.log('таймают чист')\r\n                    }\r\n                })\r\n        };\r\n\r\n        async function Async(){\r\n           await clearTimeout(timerId);\r\n           await timer(profile)\r\n        }\r\n        await Async();\r\n\r\n\r\n    }\r\n};//получить список сообщений\r\nexport const GetListFriend = () => async (dispatch) => {\r\n    let data = await UserMessageAPI.messageListFriend();\r\n    data && dispatch(SetFriend(data));\r\n};//получить список друзей\r\nexport const GetListParty = () => async (dispatch) => {\r\n    let data = await UserMessageAPI.messageListParty();\r\n    data && dispatch(SetParty(data));\r\n};//получить список друзей\r\n\r\nexport const SendMessage = (profile) => async (dispatch) => {\r\n    let data = await UserMessageAPI.SendMessage(profile);\r\n    data && dispatch(pushMessage(profile));\r\n\r\n    setTimeout(()=>{\r\n        let myElement =  document.getElementById('mess');\r\n        myElement.scrollTop=myElement.scrollHeight\r\n\r\n    },1);\r\n\r\n};//отправить сообщение\r\nexport const SendSetting = (setting) => async (dispatch) => {\r\n    let data=await UserMessageAPI.SendSetting(setting);\r\n    data && dispatch(deleteParty(setting))\r\n};//отправить сообщение\r\n//####################################################################################################\r\nexport default MessageReducer;\r\n","import {UserSubAPI} from \"../../api/api\";\r\n\r\nlet people = {\r\n    loading: false\r\n    ,people:[]\r\n};\r\n//#####################################################################\r\nconst PeopleReducer = (state = people, action) => {\r\n    switch (action.type) {\r\n//##############################################\r\n        case \"GET-USERS\"    :\r\n            return {\r\n                ...state\r\n                , people: action.people.people\r\n            };\r\n        case \"FOLLOW-PEOPLE\"    :\r\n            let f=state.people.filter(r=>r._id===action.follow);\r\n                f[0].friendStatus? f[0].friendStatus=false:f[0].friendStatus=true;\r\n            return {\r\n                ...state\r\n            };\r\n        case 'LOADING'      :\r\n            return {\r\n                ...state\r\n                , loading: action.loading\r\n            };\r\n        case 'CURRENT'      :\r\n            return {\r\n                ...state\r\n                , current: action.current\r\n            };\r\n//#################################################\r\n        default             :\r\n            return state\r\n    }\r\n};\r\n//#####################################################################\r\n//Action for ComponentDid Mount or ComponentDidUpdate\r\nexport let SetPeople = (people) => ({type: \"GET-USERS\", people});\r\nexport let Loading = (loading) => ({type: 'LOADING', loading});\r\nexport let SetCurrent = (current) => ({type: 'CURRENT', current});\r\n//############################################################################\r\n//Action for changing state\r\nexport const followPeople = (follow) => ({type: \"FOLLOW-PEOPLE\", follow});\r\n//####################################################################################################\r\nexport const GetUser = (page) => async (dispatch) => {\r\n    let data = await UserSubAPI.getPeople(page);\r\n    data && dispatch(SetPeople(data));\r\n};\r\nexport const FollowPeople = (friend) => async (dispatch) => {\r\n    let data = await UserSubAPI.subScribe(friend);\r\n    data && dispatch(followPeople(friend));\r\n};\r\n//####################################################################################################\r\nexport default PeopleReducer;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://express-kuku.herokuapp.com/',\r\n    // headers:{'KEY FOR CONNECTED WITH SERVER':\"12312-12312-SDF-34SDF2\"}\r\n});\r\n//_____________________________________________________________________________________\r\nexport const UserAppAPI = {\r\n\r\n    exit() {\r\n        return instance.get('exit').then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    registration(form) {\r\n        return instance.post('registration', {\r\n            Login: form.login,\r\n            Password: form.password,\r\n            Nickname: form.name\r\n        }).then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n};\r\n//__________________________________________________________________________________\r\nexport const UserLoginAPI = {\r\n    getUserFromServer() {\r\n        debugger\r\n        return instance.get('login').then(response => {\r\n            debugger\r\n            return response.data\r\n        })\r\n    },\r\n    sendUserFormServer(value) {\r\n        debugger\r\n        return instance.post('login', {Login:value.login, Password:value.password}).then(response => {\r\n            debugger\r\n            return response.data\r\n        })\r\n    }\r\n};\r\n//___________________________________________________________________________________\r\nexport const UserProfitAPI = {\r\n\r\n    getProfileFromServer(profile) {\r\n        return instance.get(`profile/${profile}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    sendInformation(inform){\r\n        return instance.post(`update/info`, {inform})\r\n    }\r\n\r\n};\r\n//_____________________________________________________________________________________\r\nexport const UserMessageAPI = {\r\n    messageListFriend() {\r\n        return instance.get(`message/friend`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    messageListParty() {\r\n        return instance.get(`message/party`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    messageListMessage({id,list}) {\r\n        debugger\r\n        return instance.post(`message/list`,{id,list}).then(response => {\r\n            debugger\r\n            return response.data\r\n        })\r\n    },\r\n    SendMessage(profile) {\r\n        return instance.post(`message/send`, {profile}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    SendSetting(setting) {\r\n        debugger\r\n        return instance.post(`message/setting`, {setting}).then(response => {\r\n            debugger\r\n            return response.data\r\n        })\r\n    }\r\n};\r\n//_____________________________________________________________________________________\r\nexport const UserSubAPI = {\r\n    getPeople({tags,nickname,list}) {\r\n        return instance.post('people',{tags,nickname,list}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    subScribe(friend) {\r\n        return instance.post('subscribe', {id: friend}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n};\r\n//_____________________________________________________________________________________\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/829.14706964.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {UserAppAPI, UserLoginAPI} from \"../../api/api\";\r\nimport {stopSubmit} from 'redux-form'\r\n\r\nlet loginization = {\r\n    status: false\r\n    , message: String\r\n    , user: Object\r\n};\r\n//#####################################################################\r\nconst LoginReducer = (state = loginization, action) => {\r\n    switch (action.type) {\r\n//##############################################\r\n        case 'SET-LOGIN':\r\n            return {\r\n                ...state\r\n                , status: action.user.status\r\n                , message: action.user.message\r\n                , user: action.user._id\r\n            };\r\n        case 'DEL-USER':\r\n            return {\r\n                ...state\r\n                , status: false\r\n                , message: String\r\n                , user: Object\r\n            };\r\n//#################################################\r\n        default             :\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n};\r\n//#####################################################################\r\nexport let SettingUserDispatch = (user) => ({type: 'SET-LOGIN', user});\r\nexport let DeletedUserDispatch = () => ({type: 'DEL-USER'});\r\n//############################################################################\r\nexport const GetUserFromServer = () =>\r\n    async (dispatch) => {\r\n        let data = await UserLoginAPI.getUserFromServer();\r\n    data ? dispatch(SettingUserDispatch(data))\r\n         : dispatch(DeletedUserDispatch());\r\n};//получить пользователя из куков\r\nexport const SendUserFormForServer = (formData) => async (dispatch) => {\r\n    let data = await UserLoginAPI.sendUserFormServer(formData);\r\n    data ? dispatch(SettingUserDispatch(data))\r\n         : dispatch(stopSubmit('login', {_error: data.mess}))\r\n};//войти с помощью пароля и логин\r\nexport const Exit = () => (dispatch) => {\r\n    UserAppAPI.exit().then(data => {\r\n        data && dispatch(DeletedUserDispatch());\r\n    })\r\n};//очистить стейт и удалить куки о пользователе\r\n//####################################################################################################\r\nexport default LoginReducer;\r\n","import {UserAppAPI} from \"../../api/api\";\r\n\r\nlet status = {\r\n    RegistrationStatus: false\r\n    , RegistrationMessage: ''\r\n}\r\n//#####################################################################\r\n// eslint-disable-next-line no-unused-vars\r\nconst RegistrationReducer = (state = status, action) => {\r\n    if (action.type === 'REGISTRATION-STATUS') {\r\n        return {\r\n            ...state\r\n            , RegistrationStatus: action.registration.status\r\n            , RegistrationMessage: action.registration.mess\r\n        }\r\n    } else {\r\n        return {\r\n            ...state\r\n        }\r\n    }\r\n};\r\n//#####################################################################\r\n//Action for ComponentDid Mount or ComponentDidUpdate\r\nexport let RegistrationDispatch = (registration) => ({type: 'REGISTRATION-STATUS', registration});\r\n//############################################################################\r\n//Thunk for send on Server\r\nexport const RegistrationThunk = (FormRegistration) => (dispatch) =>{\r\n        UserAppAPI.registration(FormRegistration).then(data => {\r\n            data.status && dispatch(RegistrationDispatch(data))\r\n        })\r\n};\r\n//####################################################################################################\r\nexport default RegistrationReducer;\r\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nimport LoginReducer from \"./Content/Login/LoginReducer\";\r\nimport RegistrationReducer from \"./Content/Registration/RegistrationReducer\";\r\nimport ProfileReducer from \"./Content/Profile/ProfileReducer\";\r\nimport MessageReducer from \"./Content/Messages/MessageReducer\";\r\nimport PeopleReducer from \"./Content/People/PeopleReducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    LoginReducer: LoginReducer,\r\n    RegistrationReducer: RegistrationReducer,\r\n\r\n    ProfileReducer: ProfileReducer,\r\n    MessageReducer: MessageReducer,\r\n    PeopleReducer: PeopleReducer,\r\n\r\n    form: formReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;\r\n\r\n\r\n","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {Exit} from \"../Content/Login/LoginReducer\";\r\nimport './style/style.css';\r\n\r\nlet Menu = (props) => {\r\n    function exit() {\r\n        props.Exit()\r\n    }\r\n\r\n    return (\r\n        <div className=\"Menu\">\r\n            <div><NavLink to='/profile' className=\"Button_item\">Моя Страница </NavLink></div>\r\n            <div><NavLink to=\"/message\" className=\"Button_item\">Сообщения </NavLink></div>\r\n            <div><NavLink to='/people' className=\"Button_item\">Пользователи </NavLink></div>\r\n            <div><img src={'https://upload.wikimedia.org/wikipedia/commons/thumb/8/89/ISO_7010_E002_%2B_arrow_1.svg/240px-ISO_7010_E002_%2B_arrow_1.svg.png'}\r\n                      onClick={exit}\r\n                      className={'exit'}\r\n            /></div>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateTo = (state) => ({state: state.LoginReducer,});\r\nexport default compose(\r\n    connect(mapStateTo, {Exit}\r\n    )\r\n)(Menu)","import React from 'react';\r\nimport '../style/App.css';\r\n\r\nfunction Logo() {\r\n    return  <div className={'Logo'}>\r\n\r\n            </div>\r\n\r\n}\r\n\r\nexport default Logo","//Это проверка, совпадает ли введеное пользователлем с требованиям к \"логину и паролю\"\r\n\r\n//проверка---это поле является обязательны после\r\n// клика он запоминает, при уходе он проверит заполнили ли вы его\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const required = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n};\r\n\r\n//Это устанавливает проверку на максимальную длину записанного\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    return (\r\n        value && value.length > maxLength\r\n            ? `Max length is ${maxLength} symbols`\r\n            : undefined\r\n    )\r\n};\r\n\r\n//Это устанавливает проверку на минимальную длину записанного\r\nexport const minLengthCreator = (minLength) => (value) => {\r\n    return (\r\n        value && value.length < minLength ? `Min length is ${minLength} symbols` : undefined\r\n    )\r\n};\r\n\r\n// //Провека. Число ли это?\r\n// const number = (value) =>\r\n//     value && isNaN(Number(value)) ? 'Must be a number' : undefined\r\n//\r\n//\r\n// // меньше ли чем минимальное значение\r\n// const minValue = min => value =>\r\n//     value && value < min ? `Must be at least ${min}` : undefined\r\n// const minValue13 = minValue(13)\r\n//\r\n// //проверка на правильность заполнения МЫЛА\r\nexport const email = (zzzz) => (value) => {\r\n    debugger\r\n    return (\r\n        value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n            ? 'Invalid email address'\r\n            : !zzzz.status ? <span>Пароль или логин не правильный</span> : undefined\r\n    )\r\n\r\n};\r\n//\r\n// // меньше чем допустимый вызраст\r\n// const tooYoung = value =>\r\n//     value && value < 13\r\n//         ? 'You do not meet the minimum age requirement!'\r\n//         : undefined\r\n//\r\n// // меньше чем допустимый вызраст\r\n// const aol = value =>\r\n//     value && /.+@aol\\.com/.test(value)\r\n//         ? 'Really? You still use AOL for your email?'\r\n//         : undefined\r\n//\r\n//\r\n// // Только арифметические знаки\r\n// const alphaNumeric = value =>\r\n//     value && /[^a-zA-Z0-9 ]/i.test(value)\r\n//         ? 'Only alphanumeric characters'\r\n//         : undefined\r\n//\r\n// // номер телефона 10 символов\r\n// export const phoneNumber = value =>\r\n//     value && !/^(0|[1-9][0-9]{9})$/i.test(value)\r\n//         ? 'Invalid phone number, must be 10 digits'\r\n//         : undefined\r\n//\r\n// let r = {number, minValue13, email, tooYoung, aol, alphaNumeric, phoneNumber}\r\n\r\n\r\nconst mapStateTo = (state) => ({\r\n    userEntry: state.LoginReducer.userEntry\r\n});\r\nexport default compose(connect(mapStateTo, null))(email)\r\n","import Menu from \"./MenuB\";\r\nimport React from \"react\";\r\nimport Logo from \"./Logo\";\r\n\r\nlet MenuHeader = () => {\r\n    return <div className={'Header'}>\r\n                <Logo />\r\n                <Menu/>\r\n           </div>\r\n\r\n}\r\nexport default MenuHeader","import React, {Suspense, lazy} from 'react'\r\nimport {Route} from \"react-router\";\r\nimport MenuHeader from \"../Header/MenuHeader\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport LoAd from \"../conponent/load\";\r\nimport {getLoading, getLoginUser, getUserEntry} from \"../user-selector/LoginSelector\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst ProfileCont = lazy(() => import ('./Profile/ProfileCont'));\r\nconst MessageCont = lazy(() => import(\"./Messages/MessageCont\"));\r\nconst PeopleCont = lazy(() => import(\"./People/PeopleCont\"));\r\n\r\nlet ContentCont = (props) => {\r\n    return <div className={'cont_Section'}>\r\n        {props.log && props.mess && props.peo && <div><LoAd/></div>}\r\n        {!props.log && !props.mess && !props.peo && <div><MenuHeader/></div>}\r\n        {!props.log && !props.mess && !props.peo && <div> <Content/></div>}\r\n           </div>\r\n};\r\n\r\nconst mapStateTo = (state) => ({\r\n    log: state.LoginReducer.loading\r\n    , mess:  state.MessageReducer.loading\r\n    , peo:  state.PeopleReducer.loading\r\n});\r\n\r\nexport default compose( connect(mapStateTo),withAuthRedirect )(ContentCont)\r\n\r\n\r\nlet Content = () => {\r\n    return <Suspense fallback={'.... чу херня происходит, давай подождем'}>\r\n        <div>\r\n            <Route path='/profile/:profile?' render={() =><ProfileCont/>}/>\r\n            <Route path='/message/:profile?' render={() => <MessageCont/>}/>\r\n            <Route path='/people' render={() =><PeopleCont/>}/>\r\n        </div>\r\n    </Suspense>\r\n};\r\n","import React from 'react'\r\nimport \"./style.css\"\r\n\r\nexport const Input = ({input, meta, value, ...props}) => {\r\n    const error = meta.touched && meta.error;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input {...input} {...props} className={error && \"formControl\"}/>\r\n            </div>\r\n            {error && <span className={'formSpan'}>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    const errore = meta.touched && meta.error;\r\n    return (\r\n        <div>\r\n            <div className={errore && \"formControl\"}>\r\n                <textarea {...input} {...props} wrap=\"soft\" rows={'1'} readOnly={'readOnly'} />\r\n            </div>\r\n            {errore && <span>{errore}</span>}\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {minLengthCreator, required} from \"../../utils/validator/validator\";\r\nimport {Input} from \"../../conponent/FormsControll/FormsControll\";\r\nimport \"./../../conponent/FormsControll/style.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst minLength6 = minLengthCreator(6);\r\n\r\nlet Login = (props) => {\r\n    return <div className={'login_Section'}>\r\n        <div>LOGIN</div>\r\n        <div>Entry Your Login & Password, please</div>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field required\r\n                        name={'login'}\r\n                        component={Input}\r\n                        placeholder={'Login'}\r\n                        validate={[required, minLength6]}/>\r\n            </div>\r\n            <div><Field required\r\n                        placeholder={'Password'}\r\n                        component={Input}\r\n                        name={'password'}\r\n                        validate={[required, minLength6]}/>\r\n            </div>\r\n            <div><Field component={'input'}\r\n                        type={'checkbox'}\r\n                        name={'rememberMe'}\r\n                        validate={[]}/>Remember me\r\n            </div>\r\n            {props.error && <div className={'errorEmaOrPass'}>{props.error} Это хуйня, давай заново </div>}\r\n            <div>\r\n                <button value=\"Enter\">Enter</button>\r\n                <button><NavLink to='/registration' className=\"Button_item\">Регистрация </NavLink></button>\r\n            </div>\r\n\r\n        </form>\r\n    </div>\r\n}\r\nconst ReduxLoginForm = reduxForm({form: 'login'})(Login);\r\n\r\nexport default ReduxLoginForm;","import React from 'react'\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst redirectInProfiles = (Component) => {\r\n\r\n    let state = (state) => ({state: state.LoginReducer, userStatus: state.ProfileReducer.status});\r\n\r\n    class ComponentRedirect extends React.Component {\r\n        state={\r\n        History :  localStorage.History\r\n    };\r\n        render() {\r\n            if (this.props.state.status) {\r\n                switch (History) {\r\n                    case 'profile' :\r\n                        return <Redirect to={`/profile/${this.state.Profile}`}/>;\r\n                    case 'message' :\r\n                        return <Redirect to={`/message/${this.state.Dialog}`}/>;\r\n                    case 'people' :\r\n                        return <Redirect to={`/people`}/>;\r\n                    default  :\r\n                        return <Redirect to={`/profile`}/>;\r\n                }\r\n            } else {\r\n                return <Component {...this.props} />\r\n            }\r\n        }\r\n    }\r\n    return connect(state)(ComponentRedirect)\r\n};\r\nexport default redirectInProfiles","import React, {useEffect} from 'react';\r\n\r\nimport ReduxLoginForm from \"./Login\";\r\n\r\nimport './style/style.css';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport redirectInProfiles from \"../../hoc/step2redirectInProfiles\";\r\nimport {Exit, GetUserFromServer, SendUserFormForServer} from \"./LoginReducer\";\r\nimport {getLoginUser, getUserEntry} from \"../../user-selector/LoginSelector\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nlet  LoginCont=(props)=>{\r\n\r\n    useEffect(()=> {\r\n        props.GetUserFromServer()\r\n    },[]);\r\n\r\n    let EntryForm = (formData) => {\r\n        props.SendUserFormForServer(formData)\r\n        Cookies.set('History', 'profile')\r\n    };\r\n\r\n    return (\r\n            <div className={'entry_Section'}>\r\n                  <ReduxLoginForm onSubmit={EntryForm}  />\r\n            </div>\r\n    )\r\n};\r\nconst mapStateTo = (state) => ({\r\n    user: getLoginUser(state)\r\n    , userEntry: getUserEntry(state)\r\n});\r\nexport default compose(connect(mapStateTo, {\r\n    Exit,\r\n    GetUserFromServer,\r\n    SendUserFormForServer\r\n}), redirectInProfiles)(LoginCont)\r\n\r\n\r\n","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../utils/validator/validator\";\r\nimport {Input} from \"../../conponent/FormsControll/FormsControll\";\r\nimport \"./../../conponent/FormsControll/style.css\"\r\n\r\nconst maxLength16 = maxLengthCreator(16)\r\nconst minLength6 = minLengthCreator(6)\r\n\r\nlet Registration = (props) => {\r\n    const {handleSubmit} = props\r\n    return <div className={'reg_Section'}>\r\n        <h1>REGISTRATION</h1>\r\n        <div></div>\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <div>Nickname</div>\r\n                <Field component={Input}\r\n                       placeholder={'You`r Name'}\r\n                       name={'name'}\r\n                       validate={[required, minLength6, maxLength16]}/>\r\n            </div>\r\n\r\n            <div>\r\n                <div>Login</div>\r\n                <Field required\r\n                       name={'login'}\r\n                       component={Input}\r\n                       placeholder={'Login'}\r\n                       validate={[required, minLength6]}/>\r\n            </div>\r\n            <div>\r\n                <div>Password</div>\r\n                <Field required\r\n                       placeholder={'Password'}\r\n                       component={Input}\r\n                       name={'password'}\r\n                       validate={[required, minLength6, maxLength16]}/>\r\n            </div>\r\n\r\n            {props.error && <div className={'errorEmaOrPass'}>{props.error} Это хуйня, давай заново </div>}\r\n            <div>\r\n                <button value=\"Enter\">Enter</button>\r\n            </div>\r\n\r\n        </form>\r\n    </div>\r\n};\r\nconst ReduxRegistrationForm = reduxForm({form: 'registration'})(Registration);\r\n\r\nexport default ReduxRegistrationForm;","export const RegistrationMessage = (state) => {\r\n    return state.RegistrationReducer.RegistrationMessage\r\n};\r\n\r\nexport const RegistrationStatus = (state) => {\r\n    return state.RegistrationReducer.RegistrationStatus\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet state = (state) => ({status: state.RegistrationReducer.RegistrationStatus});\r\n\r\n\r\nexport const redirectInLogin = (Component) => {\r\n\r\n\r\n    class ComponentRedirect extends React.Component {\r\n        render() {\r\n            if (this.props.status) {\r\n                return <Redirect to={`/login`}/>;\r\n            } else {\r\n                return <Component {...this.props} />\r\n            }\r\n        }\r\n    }\r\n\r\n    let ComponentTo = connect(state)(ComponentRedirect);\r\n\r\n\r\n    return ComponentTo\r\n};\r\n","import React, {PureComponent} from 'react';\r\n\r\nimport ReduxRegistrationForm from \"./Registration\";\r\n\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {RegistrationThunk} from \"./RegistrationReducer\";\r\nimport {RegistrationMessage, RegistrationStatus} from \"../../user-selector/RegistrationSelector\";\r\nimport {redirectInLogin} from \"../../hoc/RegistrationOnLogin\";\r\n\r\n\r\nclass RegistrationCont extends PureComponent {\r\n\r\n    EntryForm = (formData) => {\r\n        formData.name=formData.name.match(/(\\w+)/gim);\r\n        console.log(formData);\r\n        this.props.RegistrationThunk(formData)\r\n    };\r\n    render() {\r\n        return <div>\r\n            <ReduxRegistrationForm onSubmit={this.EntryForm}\r\n                                   userEntry={this.props.userEntry}\r\n            />\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateTo = (state) => ({\r\n    message: RegistrationMessage(state)\r\n    , status: RegistrationStatus(state)\r\n});\r\nexport default compose(redirectInLogin, connect(mapStateTo, {RegistrationThunk}))(RegistrationCont)\r\n\r\n\r\n","import React from 'react';\nimport ContentCont from \"./Content/ContentCont\";\nimport {Route} from \"react-router\";\nimport LoginCont from \"./Content/Login/LoginCont\";\nimport RegistrationCont from \"./Content/Registration/RegistrationCont\";\nimport './style/App.css';\n\nlet App=()=> {\n    return <div className={'base'}>\n                <div>\n                    <Route path='/login' render={() => <LoginCont/>}/>\n                    <Route path='/registration' render={() => <RegistrationCont/>}/>\n                </div>\n                <div>\n                    <ContentCont/>\n                </div>\n    </div>\n};\nexport default App","import  * as serviceWorker from './serviceWorker'\n\nimport store from './reduxStore.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {HashRouter} from \"react-router-dom\";\nimport App from './App';\n\nReactDOM.render(\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>, document.getElementById('root')\n);\nserviceWorker.unregister();\n\n\n//BrowserRouter basename={process.env.PUBLIC_URL}\n\n\n\n\n\n\n\n","export const getLoginUser = (state) => {\r\n    return state.LoginReducer.user\r\n};\r\nexport const getUserEntry = (state) => {\r\n    return state.LoginReducer.userEntry\r\n};\r\nexport const getLoading = (state) => {\r\n    return state.LoginReducer.loading\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet StateTo = (state) => ({state: state.LoginReducer});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RediComp extends React.Component {\r\n\r\n        render() {\r\n            return (\r\n                this.props.state.status\r\n                    ? <Component {...this.props} />\r\n                    : <Redirect to={`/login`}/>\r\n            )\r\n        }\r\n    }\r\n\r\n    let ConnectedAuth = connect(StateTo)(RediComp);\r\n\r\n    return ConnectedAuth\r\n};\r\n\r\n","import loaD from \"./pic/829.svg\";\r\nimport React from \"react\";\r\n\r\nlet LoAd = () => {\r\n    return <div id={'place-loading'}>\r\n                <div className={'Loading'}>\r\n                    <img src={loaD} alt={'PIC'}/>\r\n                </div>\r\n    </div>\r\n}\r\nexport default LoAd;","import {UserProfitAPI} from \"../../api/api\";\r\n\r\nlet profileState = {\r\n    status: false\r\n    , message: 'Profile not entry'\r\n    , loading: false\r\n\r\n\r\n};\r\n//#####################################################################\r\nconst ProfileReducer = (state = profileState, action) => {\r\n    switch (action.type) {\r\n//##############################################\r\n        case \"SET-PROFILE\"  :\r\n            return {\r\n                ...state\r\n                , status: action.profile.status\r\n                , message: action.profile.mess\r\n\r\n                , profileNickname: action.profile.Profile.Nickname\r\n                , profilePhoto: action.profile.Profile.Photo.origin!==''\r\n                                                        ?action.profile.Profile.Photo.origin\r\n                                                        :action.profile.Profile.Photo.default\r\n                , profilePhotoMin: action.profile.Profile.PhotoMin.origin!==''\r\n                    ?action.profile.Profile.PhotoMin.origin\r\n                    :action.profile.Profile.PhotoMin.default\r\n\r\n                , profileStatus: action.profile.Profile.Status\r\n                , profileLocation: action.profile.Profile.Location\r\n                , profileAge: action.profile.Profile.Age\r\n                , profileSkills: action.profile.Profile.Skills\r\n                , profileTags: action.profile.Profile.Tags\r\n                , profileGender: action.profile.Profile.Gender\r\n            };\r\n        case 'LOADING'      :\r\n            return {\r\n                ...state\r\n                , loading: action.loading\r\n            };\r\n//#################################################\r\n            case \"EDIT-INFO\"  :\r\n            return {\r\n                ...state\r\n                , profileNickname: action.inform.nickname\r\n                , profilePhoto: action.inform.photo\r\n                , profileStatus: action.inform.status\r\n                , profileLocation: action.inform.location\r\n                , profileAge: action.inform.age\r\n                , profileSkills: action.inform.skills\r\n                , profileTags: action.inform.tags\r\n                , profileGender: action.inform.gender\r\n            };\r\n//#################################################\r\n        default             :\r\n            return state\r\n    }\r\n};\r\n\r\n//$$$$$$___Action for ComponentDid Mount or ComponentDidUpdate____$$$$$\r\nexport let SettingProfile = (profile) => ({type: \"SET-PROFILE\", profile});\r\nexport let Loading = (loading) => ({type: 'LOADING', loading});\r\n//$$$$$$___Action for changing state____$$$$$\r\nexport const EditInform = (inform) => ({type: \"EDIT-INFO\", inform});\r\n//####################################################################################################\r\n\r\n//$$$$$$___Thunk for send on Server____$$$$$\r\nexport const GetProfileFromServer = (id) => async (dispatch) => {\r\n        let data = await UserProfitAPI.getProfileFromServer(id);\r\n        data && dispatch(SettingProfile(data));\r\n};//поолучить пользователя\r\n\r\nexport const sendInformation = (inform) => async (dispatch) => {\r\n        let data=await UserProfitAPI.sendInformation(inform);\r\n        data && dispatch(EditInform(inform));\r\n};//изменить статус\r\n\r\n//####################################################################################################\r\nexport default ProfileReducer;\r\n"],"sourceRoot":""}